{"ast":null,"code":"var _jsxFileName = \"/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CoinbaseCloud, Network } from '@coinbase/coinbase-cloud-sdk';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState('');\n  const [walletScan, setWalletScan] = useState({\n    network: \"\",\n    balance: \"\",\n    latest_block: \"\"\n  });\n  const [table_data, setTableData] = useState([]);\n  ;\n  const [transaction_data, setTransactionData] = useState([]);\n  ;\n\n  function toFixedValue(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  function payLoad_erc20Tokens(walletAddress, contract_list) {\n    let tmp;\n    var address_contract_list = [];\n\n    for (var i = 0; i < contract_list.length; i++) {\n      tmp = {\n        \"address\": walletAddress,\n        \"contract\": contract_list[i]\n      };\n      address_contract_list.push(tmp);\n    }\n\n    return address_contract_list;\n  }\n\n  function populateBalanceData(token_balances, erc20NameMap, ethBalance) {\n    let tmp;\n    let ethVal;\n    var balance_data = [];\n    ethVal = {\n      \"token_name\": \"ETH\",\n      \"balance\": ethBalance\n    };\n    balance_data.push(ethVal);\n\n    for (var i = 0; i < token_balances.length; i++) {\n      const preFormattedBalance = token_balances[i].amount;\n      const formattedBalance = ethers.utils.formatUnits(preFormattedBalance, token_balances[i].decimals);\n      console.log(erc20NameMap.token_balances[i].contract);\n      tmp = {\n        \"token_name\": erc20NameMap.token_balances[i].contract,\n        \"balance\": toFixedValue(formattedBalance, 4)\n      };\n      balance_data.push(tmp);\n    }\n\n    return balance_data;\n  }\n\n  function populateTransactionData(transaction_list) {\n    let tmp;\n    var transaction_data = [];\n\n    for (var i = 0; i < transaction_list.length; i++) {\n      let block_timestamp = parseInt(transaction_list[i].blockTimestamp);\n      let time_diff = new Date().getTime() - block_timestamp * 1000;\n      let time_diff_days = Math.floor(time_diff / (1000 * 60 * 60 * 24));\n      let time_diff_hours = Math.floor(time_diff % (1000 * 3600 * 24) / (1000 * 3600));\n      let time_diff_minutes = Math.floor(time_diff % (1000 * 3600) / (1000 * 60));\n      let time_diff_seconds = Math.floor(time_diff % (1000 * 60) / 1000);\n      let age;\n      const days_in_string = time_diff_days.toString();\n      const hours_in_string = time_diff_hours.toString();\n      const minutes_in_string = time_diff_minutes.toString();\n      const seconds_in_string = time_diff_seconds.toString();\n\n      if (time_diff_days > 0) {\n        age = days_in_string + \" days \" + hours_in_string + \" hours ago\";\n      } else if (time_diff_hours > 0) {\n        age = hours_in_string + \" hours ago\";\n      } else if (time_diff_minutes > 0) {\n        if (time_diff_minutes === 1) {\n          age = minutes_in_string + \" minute ago\";\n        } else {\n          age = minutes_in_string + \" minutes ago\";\n        }\n      } else {\n        age = seconds_in_string + \" seconds ago\";\n      }\n\n      tmp = {\n        \"from\": transaction_list[i].from,\n        \"to\": transaction_list[i].to,\n        \"value\": ethers.utils.formatEther(transaction_list[i].value),\n        \"hash\": transaction_list[i].transactionHash,\n        \"block_number\": parseInt(transaction_list[i].blockNumber),\n        \"age\": age\n      };\n      transaction_data.push(tmp);\n    }\n\n    return transaction_data;\n  }\n\n  async function scanWallet() {\n    setTableData([]);\n    setTransactionData([]);\n    const settings = {\n      apiUsername: process.env.REACT_APP_NODE_USERNAME,\n      // You can find this in your Node project's settings\n      apiPassword: process.env.REACT_APP_NODE_PASSWORD,\n      // Password associated with the username\n      network: Network.ETH_MAINNET\n    };\n    const erc20NameMap = {\n      \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\": \"Wrapped ETH\",\n      \"0xdAC17F958D2ee523a2206206994597C13D831ec7\": \"Tether USD\",\n      \"0xB8c77482e45F1F44dE1745F52C74426C631bDD52\": \"Binance Coin\",\n      \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\": \"USD Coin\",\n      \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\": \"Binance USD\",\n      \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\": \"Matic\",\n      \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\": \"stETH\"\n    };\n\n    if (ethers.utils.isAddress(walletAddress)) {\n      const coinbaseCloud = new CoinbaseCloud(settings);\n      const cbProvider = coinbaseCloud.provider;\n      const network_obj = await cbProvider.getNetwork();\n      const latest_block = await cbProvider.getBlockNumber();\n      const contract_list = [\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0x4d224452801ACEd8B2F0aebE155379bb5D594381\", \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"];\n      const contract_params = payLoad_erc20Tokens(walletAddress, contract_list); //call advanced API for erc20 tokens \n\n      const cb_balances = await coinbaseCloud.advanced.getBalances(contract_params);\n      console.log(cb_balances);\n      let token_balances = cb_balances.balances[0].tokenBalances;\n      console.log(\"token balances are\", token_balances);\n      const network = network_obj.name;\n      const preformat_balance = ethers.utils.formatEther(await cbProvider.getBalance(walletAddress));\n      const balance = toFixedValue(preformat_balance, 4);\n      const balance_data = populateBalanceData(token_balances, erc20NameMap, balance);\n      console.log(\"balance data is\", balance_data);\n      setWalletScan({\n        network,\n        balance,\n        latest_block\n      });\n      let wrappedEthBalance;\n      let apeCoinBalance;\n      let usdcBalance;\n\n      for (const eachTokenBalance in token_balances) {\n        if (token_balances[eachTokenBalance].contract === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n          const preWrappedCoin = token_balances[eachTokenBalance].amount.toString();\n          wrappedEthBalance = ethers.utils.formatUnits(preWrappedCoin, token_balances[eachTokenBalance].decimals);\n          wrappedEthBalance = toFixedValue(wrappedEthBalance, 4);\n        } else if (token_balances[eachTokenBalance].contract === \"0x4d224452801aced8b2f0aebe155379bb5d594381\") {\n          const preApeCoin = token_balances[eachTokenBalance].amount.toString();\n          apeCoinBalance = ethers.utils.formatUnits(preApeCoin, token_balances[eachTokenBalance].decimals);\n          apeCoinBalance = toFixedValue(apeCoinBalance, 4);\n        } else if (token_balances[eachTokenBalance].contract === \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\") {\n          const preusdcBalance = token_balances[eachTokenBalance].amount.toString();\n          usdcBalance = ethers.utils.formatUnits(preusdcBalance, token_balances[eachTokenBalance].decimals);\n          usdcBalance = toFixedValue(usdcBalance, 4);\n        }\n      }\n\n      console.log(\"apecoin\", apeCoinBalance);\n      console.log(\"usdc\", usdcBalance);\n      console.log(\"wrapped\", wrappedEthBalance);\n      const table_data = balance_data;\n      /*\n      [\n        { token_name: \"Ethereum\", balance: balance },\n        { token_name: \"APECoin\", balance: apeCoinBalance },\n        { token_name: \"Wrapped Ether\", balance: wrappedEthBalance },\n        { token_name: \"USDC\", balance: usdcBalance }\n      ] */\n\n      setTableData(table_data); //transactions\n\n      const transactions = await coinbaseCloud.advanced.getTransactionsByAddress(walletAddress, '0x0', //start block\n      ethers.utils.hexlify(latest_block), //end block\n      'SENDER_OR_RECEIVER', 'desc', 10, 1);\n      console.log(\"Verify my transactions\", transactions.transactions);\n      let transaction_list = transactions.transactions;\n      const transaction_data = populateTransactionData(transaction_list);\n      setTransactionData(transaction_data);\n      console.log(\"Verify my transaction data\", transaction_data);\n    } else {\n      alert(\"Please enter the correct eth address\");\n    }\n  }\n\n  const setWalletAddr = event => {\n    setWalletAddress(event.target.value);\n  };\n  /*\n  const setContractAddress = event => {\n      setContractAddr(event.target.value);\n    };\n  */\n\n\n  const handleSubmit = event => {\n    event.preventDefault(); // üëáÔ∏è value of input field\n\n    scanWallet();\n    console.log(\"table data is\", typeof table_data);\n    console.log('WalletAddress ', walletAddress);\n  };\n  /*\n    function handleContractSubmit(event) {\n      event.preventDefault();\n      // üëáÔ∏è value of input field\n      console.log('ContractAddress ', contractAddress);\n    }\n  \n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Wallet Address Entered: \", walletAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Network Name: \", walletScan.network]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Latest Block: \", walletScan.latest_block]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-style-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wallet Scanner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"walletAddress\",\n            type: \"text\",\n            name: \"walletAddress\",\n            value: walletAddress,\n            onChange: setWalletAddr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Balances: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"styled-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Token Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: table_data.map((value, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.token_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.balance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 21\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Transactions: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"styled-table1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Age\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Block Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"From\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transaction Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transaction_data.map((value, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.age\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.block_number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.from\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.to\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.hash\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RZ+2GQMvpUYkg0cFXehEmpJjvYA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","CoinbaseCloud","Network","App","walletAddress","setWalletAddress","walletScan","setWalletScan","network","balance","latest_block","table_data","setTableData","transaction_data","setTransactionData","toFixedValue","value","dp","parseFloat","toFixed","payLoad_erc20Tokens","contract_list","tmp","address_contract_list","i","length","push","populateBalanceData","token_balances","erc20NameMap","ethBalance","ethVal","balance_data","preFormattedBalance","amount","formattedBalance","utils","formatUnits","decimals","console","log","contract","populateTransactionData","transaction_list","block_timestamp","parseInt","blockTimestamp","time_diff","Date","getTime","time_diff_days","Math","floor","time_diff_hours","time_diff_minutes","time_diff_seconds","age","days_in_string","toString","hours_in_string","minutes_in_string","seconds_in_string","from","to","formatEther","transactionHash","blockNumber","scanWallet","settings","apiUsername","process","env","REACT_APP_NODE_USERNAME","apiPassword","REACT_APP_NODE_PASSWORD","ETH_MAINNET","isAddress","coinbaseCloud","cbProvider","provider","network_obj","getNetwork","getBlockNumber","contract_params","cb_balances","advanced","getBalances","balances","tokenBalances","name","preformat_balance","getBalance","wrappedEthBalance","apeCoinBalance","usdcBalance","eachTokenBalance","preWrappedCoin","preApeCoin","preusdcBalance","transactions","getTransactionsByAddress","hexlify","alert","setWalletAddr","event","target","handleSubmit","preventDefault","map","key","token_name","block_number","hash"],"sources":["/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CoinbaseCloud, Network } from '@coinbase/coinbase-cloud-sdk';\nimport './App.css';\n\n\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState('');\n  const [walletScan, setWalletScan] = useState({\n    network: \"\",\n    balance: \"\",\n    latest_block: \"\"\n  });\n  const [table_data, setTableData] = useState([]);;\n  const [transaction_data, setTransactionData] = useState([]);;\n\n  function toFixedValue(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  function payLoad_erc20Tokens(walletAddress, contract_list) {\n    let tmp;\n    var address_contract_list = []\n    for (var i = 0; i < contract_list.length; i++) {\n      tmp = { \"address\": walletAddress, \"contract\": contract_list[i] }\n      address_contract_list.push(tmp)\n    }\n    return address_contract_list\n  }\n\n\n\nfunction populateBalanceData(token_balances, erc20NameMap, ethBalance) {\n    let tmp;\n    let ethVal;\n    var balance_data = []\n    ethVal={ \"token_name\":\"ETH\", \"balance\":ethBalance}\n    balance_data.push(ethVal)\n    for (var i = 0; i < token_balances.length; i++) {\n      const preFormattedBalance = token_balances[i].amount\n      const formattedBalance = ethers.utils.formatUnits(preFormattedBalance, token_balances[i].decimals)\n      console.log(erc20NameMap.token_balances[i].contract)\n      tmp = {\"token_name\": erc20NameMap.token_balances[i].contract,\"balance\": toFixedValue(formattedBalance, 4) }\n      balance_data.push(tmp)\n    }\n    return balance_data\n\n  }\n\n  function populateTransactionData(transaction_list) {\n    let tmp;\n    var transaction_data = []\n    for (var i = 0; i < transaction_list.length; i++) {\n      let block_timestamp = parseInt(transaction_list[i].blockTimestamp);\n      let time_diff = new Date().getTime() - block_timestamp * 1000;\n      let time_diff_days = Math.floor(time_diff / (1000 * 60 * 60 * 24));\n      let time_diff_hours = Math.floor((time_diff % (1000 * 3600 * 24)) / (1000 * 3600));\n      let time_diff_minutes = Math.floor((time_diff % (1000 * 3600)) / (1000 * 60));\n      let time_diff_seconds = Math.floor((time_diff % (1000 * 60)) / 1000);\n      let age;\n      const days_in_string = time_diff_days.toString()\n      const hours_in_string = time_diff_hours.toString()\n      const minutes_in_string = time_diff_minutes.toString()\n      const seconds_in_string = time_diff_seconds.toString()\n      if (time_diff_days > 0) {\n        age = days_in_string + \" days \" + hours_in_string + \" hours ago\"\n      } else if (time_diff_hours > 0) {\n        age = hours_in_string + \" hours ago\"\n      } else if (time_diff_minutes > 0) {\n        if (time_diff_minutes === 1) {\n          age = minutes_in_string + \" minute ago\"\n        }\n        else {\n          age = minutes_in_string + \" minutes ago\"\n        }\n      } else {\n        age = seconds_in_string + \" seconds ago\"\n      }\n\n      tmp = { \"from\": transaction_list[i].from, \"to\": transaction_list[i].to, \"value\": ethers.utils.formatEther(transaction_list[i].value), \"hash\": transaction_list[i].transactionHash, \"block_number\": parseInt(transaction_list[i].blockNumber), \"age\": age }\n      transaction_data.push(tmp)\n    }\n    return transaction_data\n  }\n\n  async function scanWallet() {\n\n    setTableData([]);\n    setTransactionData([]);\n    const settings = {\n      apiUsername: process.env.REACT_APP_NODE_USERNAME, // You can find this in your Node project's settings\n      apiPassword: process.env.REACT_APP_NODE_PASSWORD, // Password associated with the username\n      network: Network.ETH_MAINNET\n    }\n    const erc20NameMap={\n      \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\":\"Wrapped ETH\",\n      \"0xdAC17F958D2ee523a2206206994597C13D831ec7\":\"Tether USD\",\n      \"0xB8c77482e45F1F44dE1745F52C74426C631bDD52\" :\"Binance Coin\",\n      \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\":\"USD Coin\",\n      \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\":\"Binance USD\",\n      \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\":\"Matic\",\n      \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\":\"stETH\"\n    }\n\n    if (ethers.utils.isAddress(walletAddress)) {\n      const coinbaseCloud = new CoinbaseCloud(settings)\n      const cbProvider = coinbaseCloud.provider\n\n      const network_obj = await cbProvider.getNetwork();\n      const latest_block = await cbProvider.getBlockNumber()\n      const contract_list = [\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0x4d224452801ACEd8B2F0aebE155379bb5D594381\", \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n      const contract_params = payLoad_erc20Tokens(walletAddress, contract_list);\n\n\n      //call advanced API for erc20 tokens \n      const cb_balances = await coinbaseCloud.advanced.getBalances(contract_params)\n      console.log(cb_balances)\n      let token_balances = cb_balances.balances[0].tokenBalances\n\n\n      console.log(\"token balances are\", token_balances)\n     \n\n      const network = network_obj.name;\n      const preformat_balance = ethers.utils.formatEther(await cbProvider.getBalance(walletAddress));\n\n      const balance = toFixedValue(preformat_balance, 4)\n      const balance_data = populateBalanceData(token_balances, erc20NameMap, balance)\n      console.log(\"balance data is\", balance_data)\n      setWalletScan({\n        network,\n        balance,\n        latest_block\n      });\n\n      let wrappedEthBalance;\n      let apeCoinBalance;\n      let usdcBalance;\n      for (const eachTokenBalance in token_balances) {\n        if (token_balances[eachTokenBalance].contract === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n          const preWrappedCoin = token_balances[eachTokenBalance].amount.toString();\n          wrappedEthBalance = ethers.utils.formatUnits(preWrappedCoin, token_balances[eachTokenBalance].decimals);\n          wrappedEthBalance = toFixedValue(wrappedEthBalance, 4);\n        }\n        else if (token_balances[eachTokenBalance].contract === \"0x4d224452801aced8b2f0aebe155379bb5d594381\") {\n          const preApeCoin = token_balances[eachTokenBalance].amount.toString();\n          apeCoinBalance = ethers.utils.formatUnits(preApeCoin, token_balances[eachTokenBalance].decimals);\n          apeCoinBalance = toFixedValue(apeCoinBalance, 4)\n        }\n        else if (token_balances[eachTokenBalance].contract === \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\") {\n          const preusdcBalance = token_balances[eachTokenBalance].amount.toString();\n          usdcBalance = ethers.utils.formatUnits(preusdcBalance, token_balances[eachTokenBalance].decimals);\n          usdcBalance = toFixedValue(usdcBalance, 4)\n        }\n      }\n\n      console.log(\"apecoin\", apeCoinBalance);\n      console.log(\"usdc\", usdcBalance);\n      console.log(\"wrapped\", wrappedEthBalance);\n\n\n\n      const table_data = balance_data\n      /*\n      [\n        { token_name: \"Ethereum\", balance: balance },\n        { token_name: \"APECoin\", balance: apeCoinBalance },\n        { token_name: \"Wrapped Ether\", balance: wrappedEthBalance },\n        { token_name: \"USDC\", balance: usdcBalance }\n      ] */\n      setTableData(table_data);\n\n      //transactions\n      const transactions = await coinbaseCloud.advanced\n        .getTransactionsByAddress(\n          walletAddress,\n          '0x0',//start block\n          ethers.utils.hexlify(latest_block),//end block\n          'SENDER_OR_RECEIVER',\n          'desc',\n          10,\n          1\n        );\n\n      console.log(\"Verify my transactions\", transactions.transactions)\n      let transaction_list = transactions.transactions;\n      const transaction_data = populateTransactionData(transaction_list)\n      setTransactionData(transaction_data)\n\n      console.log(\"Verify my transaction data\", transaction_data)\n\n    } else {\n      alert(\"Please enter the correct eth address\");\n    }\n\n\n\n  }\n\n\n  const setWalletAddr = event => {\n    setWalletAddress(event.target.value);\n  };\n  /*\n  const setContractAddress = event => {\n      setContractAddr(event.target.value);\n    };\n  */\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // üëáÔ∏è value of input field\n    scanWallet();\n    console.log(\"table data is\", typeof (table_data));\n    console.log('WalletAddress ', walletAddress);\n\n  };\n  /*\n    function handleContractSubmit(event) {\n      event.preventDefault();\n      // üëáÔ∏è value of input field\n      console.log('ContractAddress ', contractAddress);\n    }\n  \n  */\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Wallet Address Entered: {walletAddress}</h3>\n        <h3>Network Name: {walletScan.network}</h3>\n        <h4>Latest Block: {walletScan.latest_block}</h4>\n        <div className=\"form-style-6\">\n          <h1>Wallet Scanner</h1>\n          <form onSubmit={handleSubmit}>\n            <input id=\"walletAddress\" type=\"text\" name=\"walletAddress\" value={walletAddress} onChange={setWalletAddr} />\n            <input type=\"submit\" value=\"Send\" />\n          </form>\n        </div>\n\n\n\n        <h3> Balances: </h3>\n        <table className=\"styled-table\">\n          <thead>\n            <tr>\n              <th>Token Name</th>\n              <th>Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              table_data.map((value, key) => {\n                return (\n                  <tr key={key}>\n                    <td>{value.token_name}</td>\n                    <td>{value.balance}</td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table>\n\n\n        <h3> Transactions: </h3>\n        <table className=\"styled-table1\">\n\n          <thead>\n            <tr>\n              <th>Age</th>\n              <th>Block Number</th>\n              <th>From</th>\n              <th>To</th>\n              <th>Transaction Hash</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              transaction_data.map((value, key) => {\n                return (\n                  <tr key={key}>\n                    <td>{value.age}</td>\n                    <td>{value.block_number}</td>\n                    <td>{value.from}</td>\n                    <td>{value.to}</td>\n                    <td>{value.hash}</td>\n                    <td>{value.value}</td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}