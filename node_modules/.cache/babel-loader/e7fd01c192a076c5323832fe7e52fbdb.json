{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactBitArray = void 0;\n\nvar multisig_1 = require(\"@terra-money/terra.proto/cosmos/crypto/multisig/v1beta1/multisig\");\n\nvar CompactBitArray =\n/** @class */\nfunction () {\n  function CompactBitArray(extra_bits_stored, elems) {\n    this.extra_bits_stored = extra_bits_stored;\n    this.elems = elems;\n  }\n\n  CompactBitArray.fromBits = function (bits) {\n    if (bits <= 0) {\n      throw new Error('CompactBitArray bits must be bigger than 0');\n    }\n\n    var num_elems = (bits + 7) / 8;\n\n    if (num_elems <= 0 || num_elems > Math.pow(2, 32) - 1) {\n      // We encountered an overflow here, and shouldn't pass negatives\n      // to make, nor should we allow unreasonable limits > maxint32.\n      // See https://github.com/cosmos/cosmos-sdk/issues/9162\n      throw new Error('CompactBitArray overflow');\n    }\n\n    return new CompactBitArray(bits % 8, Buffer.alloc(num_elems));\n  }; // returns the number of bits in the bitarray\n\n\n  CompactBitArray.prototype.count = function () {\n    if (this.extra_bits_stored == 0) {\n      return this.elems.length * 8;\n    }\n\n    return (this.elems.length - 1) * 8 + this.extra_bits_stored;\n  }; // returns true if the bit at index i is set; returns false otherwise.\n  // The behavior is undefined if i >= bA.Count()\n\n\n  CompactBitArray.prototype.getIndex = function (i) {\n    if (i < 0 || i >= this.count()) {\n      return false;\n    }\n\n    return (this.elems.readUInt8(i >> 3) & 1 << 7 - i % 8) > 0;\n  }; // sets the bit at index i within the bit array. Returns true if and only if the\n  // operation succeeded. The behavior is undefined if i >= bA.Count()\n\n\n  CompactBitArray.prototype.setIndex = function (i, v) {\n    if (i < 0 || i >= this.count()) {\n      return false;\n    }\n\n    if (v) {\n      this.elems[i >> 3] |= 1 << 7 - i % 8;\n    } else {\n      this.elems[i >> 3] &= ~(1 << 7 - i % 8);\n    }\n\n    return true;\n  }; // returns the number of bits set to true before the\n  // given index. e.g. if bA = _XX__XX, NumOfTrueBitsBefore(4) = 2, since\n  // there are two bits set to true before index 4.\n\n\n  CompactBitArray.prototype.numTrueBitsBefore = function (index) {\n    var countOneBits = function (n) {\n      return n.toString(2).split('0').join('').length;\n    };\n\n    var ones_count = 0;\n    var max = this.count();\n\n    if (index > max) {\n      index = max;\n    } // below we iterate over the bytes then over bits (in low endian) and count bits set to 1\n\n\n    for (var elem = 0;; elem++) {\n      if (elem * 8 + 7 >= index) {\n        ones_count += countOneBits(this.elems[elem] >> 7 - index % 8 + 1);\n        return ones_count;\n      }\n\n      ones_count += countOneBits(this.elems[elem]);\n    }\n  };\n\n  CompactBitArray.fromData = function (data) {\n    return new CompactBitArray(data.extra_bits_stored, Buffer.from(data.elems, 'base64'));\n  };\n\n  CompactBitArray.prototype.toData = function () {\n    return {\n      elems: this.elems.toString('base64'),\n      extra_bits_stored: this.extra_bits_stored\n    };\n  };\n\n  CompactBitArray.fromProto = function (proto) {\n    return new CompactBitArray(proto.extraBitsStored, Buffer.from(proto.elems));\n  };\n\n  CompactBitArray.prototype.toProto = function () {\n    return multisig_1.CompactBitArray.fromPartial({\n      elems: this.elems,\n      extraBitsStored: this.extra_bits_stored\n    });\n  };\n\n  return CompactBitArray;\n}();\n\nexports.CompactBitArray = CompactBitArray;","map":{"version":3,"mappings":"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","names":["extra_bits_stored","elems","CompactBitArray","bits","Error","num_elems","Math","pow","Buffer","alloc","length","i","count","readUInt8","v","index","countOneBits","n","toString","split","join","ones_count","max","elem","data","from","proto","extraBitsStored","multisig_1","fromPartial","exports"],"sources":["../../src/core/CompactBitArray.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}