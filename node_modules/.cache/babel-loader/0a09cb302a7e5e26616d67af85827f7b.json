{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bech32m = exports.bech32 = void 0;\nconst ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst ALPHABET_MAP = {};\n\nfor (let z = 0; z < ALPHABET.length; z++) {\n  const x = ALPHABET.charAt(z);\n  ALPHABET_MAP[x] = z;\n}\n\nfunction polymodStep(pre) {\n  const b = pre >> 25;\n  return (pre & 0x1ffffff) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\n\nfunction prefixChk(prefix) {\n  let chk = 1;\n\n  for (let i = 0; i < prefix.length; ++i) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';\n    chk = polymodStep(chk) ^ c >> 5;\n  }\n\n  chk = polymodStep(chk);\n\n  for (let i = 0; i < prefix.length; ++i) {\n    const v = prefix.charCodeAt(i);\n    chk = polymodStep(chk) ^ v & 0x1f;\n  }\n\n  return chk;\n}\n\nfunction convert(data, inBits, outBits, pad) {\n  let value = 0;\n  let bits = 0;\n  const maxV = (1 << outBits) - 1;\n  const result = [];\n\n  for (let i = 0; i < data.length; ++i) {\n    value = value << inBits | data[i];\n    bits += inBits;\n\n    while (bits >= outBits) {\n      bits -= outBits;\n      result.push(value >> bits & maxV);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push(value << outBits - bits & maxV);\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding';\n    if (value << outBits - bits & maxV) return 'Non-zero padding';\n  }\n\n  return result;\n}\n\nfunction toWords(bytes) {\n  return convert(bytes, 8, 5, true);\n}\n\nfunction fromWordsUnsafe(words) {\n  const res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n}\n\nfunction fromWords(words) {\n  const res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n  throw new Error(res);\n}\n\nfunction getLibraryFromEncoding(encoding) {\n  let ENCODING_CONST;\n\n  if (encoding === 'bech32') {\n    ENCODING_CONST = 1;\n  } else {\n    ENCODING_CONST = 0x2bc830a3;\n  }\n\n  function encode(prefix, words, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');\n    prefix = prefix.toLowerCase(); // determine chk mod\n\n    let chk = prefixChk(prefix);\n    if (typeof chk === 'string') throw new Error(chk);\n    let result = prefix + '1';\n\n    for (let i = 0; i < words.length; ++i) {\n      const x = words[i];\n      if (x >> 5 !== 0) throw new Error('Non 5-bit word');\n      chk = polymodStep(chk) ^ x;\n      result += ALPHABET.charAt(x);\n    }\n\n    for (let i = 0; i < 6; ++i) {\n      chk = polymodStep(chk);\n    }\n\n    chk ^= ENCODING_CONST;\n\n    for (let i = 0; i < 6; ++i) {\n      const v = chk >> (5 - i) * 5 & 0x1f;\n      result += ALPHABET.charAt(v);\n    }\n\n    return result;\n  }\n\n  function __decode(str, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (str.length < 8) return str + ' too short';\n    if (str.length > LIMIT) return 'Exceeds length limit'; // don't allow mixed case\n\n    const lowered = str.toLowerCase();\n    const uppered = str.toUpperCase();\n    if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;\n    str = lowered;\n    const split = str.lastIndexOf('1');\n    if (split === -1) return 'No separator character for ' + str;\n    if (split === 0) return 'Missing prefix for ' + str;\n    const prefix = str.slice(0, split);\n    const wordChars = str.slice(split + 1);\n    if (wordChars.length < 6) return 'Data too short';\n    let chk = prefixChk(prefix);\n    if (typeof chk === 'string') return chk;\n    const words = [];\n\n    for (let i = 0; i < wordChars.length; ++i) {\n      const c = wordChars.charAt(i);\n      const v = ALPHABET_MAP[c];\n      if (v === undefined) return 'Unknown character ' + c;\n      chk = polymodStep(chk) ^ v; // not in the checksum?\n\n      if (i + 6 >= wordChars.length) continue;\n      words.push(v);\n    }\n\n    if (chk !== ENCODING_CONST) return 'Invalid checksum for ' + str;\n    return {\n      prefix,\n      words\n    };\n  }\n\n  function decodeUnsafe(str, LIMIT) {\n    const res = __decode(str, LIMIT);\n\n    if (typeof res === 'object') return res;\n  }\n\n  function decode(str, LIMIT) {\n    const res = __decode(str, LIMIT);\n\n    if (typeof res === 'object') return res;\n    throw new Error(res);\n  }\n\n  return {\n    decodeUnsafe,\n    decode,\n    encode,\n    toWords,\n    fromWordsUnsafe,\n    fromWords\n  };\n}\n\nexports.bech32 = getLibraryFromEncoding('bech32');\nexports.bech32m = getLibraryFromEncoding('bech32m');","map":{"version":3,"names":["Object","defineProperty","exports","value","bech32m","bech32","ALPHABET","ALPHABET_MAP","z","length","x","charAt","polymodStep","pre","b","prefixChk","prefix","chk","i","c","charCodeAt","v","convert","data","inBits","outBits","pad","bits","maxV","result","push","toWords","bytes","fromWordsUnsafe","words","res","Array","isArray","fromWords","Error","getLibraryFromEncoding","encoding","ENCODING_CONST","encode","LIMIT","TypeError","toLowerCase","__decode","str","lowered","uppered","toUpperCase","split","lastIndexOf","slice","wordChars","undefined","decodeUnsafe","decode"],"sources":["/Users/vijithreddybheemireddi/node_modules/bech32/dist/index.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bech32m = exports.bech32 = void 0;\nconst ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return 'Invalid prefix (' + prefix + ')';\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return 'Excess padding';\n        if ((value << (outBits - bits)) & maxV)\n            return 'Non-zero padding';\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === 'bech32') {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError('Exceeds length limit');\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            throw new Error(chk);\n        let result = prefix + '1';\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error('Non 5-bit word');\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + ' too short';\n        if (str.length > LIMIT)\n            return 'Exceeds length limit';\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return 'Mixed-case string ' + str;\n        str = lowered;\n        const split = str.lastIndexOf('1');\n        if (split === -1)\n            return 'No separator character for ' + str;\n        if (split === 0)\n            return 'Missing prefix for ' + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return 'Data too short';\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return 'Unknown character ' + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return 'Invalid checksum for ' + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nexports.bech32 = getLibraryFromEncoding('bech32');\nexports.bech32m = getLibraryFromEncoding('bech32m');\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}