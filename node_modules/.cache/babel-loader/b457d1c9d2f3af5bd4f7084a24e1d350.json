{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.int = exports.dec = exports.Int = exports.Dec = exports.Numeric = exports.DEC_PRECISION = void 0;\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nexports.DEC_PRECISION = 18;\nvar Numeric;\n\n(function (Numeric) {\n  function parse(value) {\n    if (value instanceof Dec) {\n      return value;\n    } else if (typeof value === 'string') {\n      if (value.includes('.')) {\n        return new Dec(value);\n      } else {\n        return new Int(value);\n      }\n    } else {\n      var _value = new decimal_js_1.default(value);\n\n      if (_value.isInteger()) {\n        return new Int(_value);\n      } else {\n        return new Dec(_value.toString());\n      }\n    }\n  }\n\n  Numeric.parse = parse;\n})(Numeric = exports.Numeric || (exports.Numeric = {}));\n/**\n * Represents decimal values serialized with 18 digits of precision. This implementation\n * is based on the `decimal.js` library, and returns Dec values for only [[Dec.add]],\n * [[Dec.sub]], [[Dec.mul]], [[Dec.div]], and [[Dec.mod]]. For other methods inherited\n * from `Decimal`, you will need to convert back to `Dec` to remain compatible for\n * submitting information that requires `Dec` format back to the blockchain.\n *\n * Example:\n *\n * ```ts\n * const dec = new Dec(1.5);\n *\n * const decimal = dec.sqrt();\n * const dec2 = new Dec(decimal);\n */\n\n\nvar Dec =\n/** @class */\nfunction (_super) {\n  __extends(Dec, _super);\n\n  function Dec(arg) {\n    return _super.call(this, (arg !== null && arg !== void 0 ? arg : 0).toString()) || this;\n  }\n\n  Dec.prototype.toString = function () {\n    return this.toFixed(exports.DEC_PRECISION);\n  };\n\n  Dec.withPrec = function (value, prec) {\n    return new Dec(new Dec(value).div(Math.pow(10, prec)));\n  }; // type conversion\n\n\n  Dec.prototype.toInt = function () {\n    return new Int(this);\n  }; // arithmetic\n\n\n  Dec.prototype.add = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.add.call(this, val));\n  };\n\n  Dec.prototype.sub = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.sub.call(this, val));\n  };\n\n  Dec.prototype.mul = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mul.call(this, val));\n  };\n\n  Dec.prototype.div = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.div.call(this, val));\n  };\n\n  Dec.prototype.mod = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mod.call(this, val));\n  };\n\n  return Dec;\n}(decimal_js_1.default);\n\nexports.Dec = Dec;\n\nvar _Int = decimal_js_1.default.clone();\n/**\n * Represents Integer values. Used mainly to store integer values of [[Coin]] and [[Coins]].\n *\n * Note: Do not use to work with values greater than 9999999999999999999. This\n * implementation is based on the `decimal.js` library, and returns Int values for only\n * [[Int.add]], [[Int.sub]], [[Int.mul]], [[Int.div]], and [[Int.mod]]. For other\n * methods inherited from `Decimal`, you will need to convert back to `Int` to remain\n * compatible for submitting information that requires `Int` format back to the\n * blockchain.\n *\n * Example:\n *\n * ```ts\n * const int = new Int(1.5);\n *\n * const decimal = int.pow(3);\n * const int2 = new Int(decimal);\n */\n\n\nvar Int =\n/** @class */\nfunction (_super) {\n  __extends(Int, _super);\n\n  function Int(arg) {\n    var _this = this;\n\n    var _arg = new decimal_js_1.default((arg !== null && arg !== void 0 ? arg : 0).toString());\n\n    _this = _super.call(this, _arg.divToInt(1)) || this;\n    return _this;\n  }\n\n  Int.prototype.toString = function () {\n    return this.toFixed();\n  }; // type conversion\n\n\n  Int.prototype.toDec = function () {\n    return new Dec(this);\n  }; // artihmetic\n\n\n  Int.prototype.add = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).add(val);\n    } else {\n      return new Int(this.plus(val));\n    }\n  };\n\n  Int.prototype.sub = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).sub(val);\n    } else {\n      return new Int(this.minus(val));\n    }\n  };\n\n  Int.prototype.mul = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).mul(val);\n    } else {\n      return new Int(this.times(val));\n    }\n  };\n\n  Int.prototype.div = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).div(val);\n    } else {\n      return new Int(_super.prototype.div.call(this, val));\n    }\n  };\n\n  Int.prototype.mod = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).mod(val);\n    } else {\n      return new Int(_super.prototype.mod.call(this, val));\n    }\n  };\n\n  return Int;\n}(_Int);\n\nexports.Int = Int;\n/**\n * Template tagged literal for creating new Dec objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { dec } from \"@terra-money/terra.js\";\n *\n * const dec1 = dec`234.12312`;\n * const dec2 = new Dec(\"234.12312\");\n *\n * dec1.equals(dec2);\n * ```\n * @param strings\n */\n\nfunction dec(strings) {\n  return new Dec(strings[0]);\n}\n\nexports.dec = dec;\n/**\n * Template tagged literal for creating new Int objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { int } from \"@terra-money/terra.js\";\n *\n * const int1 = int`234`;\n * const int2 = new Int(\"234\");\n *\n * int1.equals(int2);\n * ```\n * @param strings\n */\n\nfunction int(strings) {\n  return new Int(strings[0]);\n}\n\nexports.int = int;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEaA,wBAAgB,EAAhB;AAcb,IAAiBC,OAAjB;;AAAA,WAAiBA,OAAjB,EAAwB;EAItB,SAAgBC,KAAhB,CAAsBC,KAAtB,EAAkC;IAChC,IAAIA,KAAK,YAAYC,GAArB,EAA0B;MACxB,OAAOD,KAAP;IACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MACpC,IAAIA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAJ,EAAyB;QACvB,OAAO,IAAID,GAAJ,CAAQD,KAAR,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAIG,GAAJ,CAAQH,KAAR,CAAP;MACD;IACF,CANM,MAMA;MACL,IAAMI,MAAM,GAAG,IAAIC,oBAAJ,CAAYL,KAAZ,CAAf;;MACA,IAAII,MAAM,CAACE,SAAP,EAAJ,EAAwB;QACtB,OAAO,IAAIH,GAAJ,CAAQC,MAAR,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAIH,GAAJ,CAAQG,MAAM,CAACG,QAAP,EAAR,CAAP;MACD;IACF;EACF;;EAjBeT,gBAAKC,KAAL;AAkBjB,CAtBD,EAAiBD,OAAO,GAAPD,sCAAO,EAAP,CAAjB;AAwBA;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;EAAyBW;;EACvB,aAAYC,GAAZ,EAA+B;WAC7BC,kBAAM,CAACD,GAAG,SAAH,OAAG,WAAH,SAAO,CAAR,EAAWF,QAAX,EAAN,KAA4B;EAC7B;;EAEMN,yBAAP;IACE,OAAO,KAAKU,OAAL,CAAad,qBAAb,CAAP;EACD,CAFM;;EAIOI,eAAd,UAAuBD,KAAvB,EAA6CY,IAA7C,EAAyD;IACvD,OAAO,IAAIX,GAAJ,CAAQ,IAAIA,GAAJ,CAAQD,KAAR,EAAea,GAAf,CAAmBC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaH,IAAb,CAAnB,CAAR,CAAP;EACD,CAFa,CAThB,CAaE;;;EACOX,sBAAP;IACE,OAAO,IAAIE,GAAJ,CAAQ,IAAR,CAAP;EACD,CAFM,CAdT,CAkBE;;;EAEOF,oBAAP,UAAWe,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAG,IAAIhB,GAAJ,CAAQH,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAR,CAAZ;IACA,OAAO,IAAIf,GAAJ,CAAQS,iBAAMQ,GAAN,CAASC,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;EACD,CAHM;;EAKAhB,oBAAP,UAAWe,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAG,IAAIhB,GAAJ,CAAQH,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAR,CAAZ;IACA,OAAO,IAAIf,GAAJ,CAAQS,iBAAMU,GAAN,CAASD,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;EACD,CAHM;;EAKAhB,oBAAP,UAAWe,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAG,IAAIhB,GAAJ,CAAQH,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAR,CAAZ;IACA,OAAO,IAAIf,GAAJ,CAAQS,iBAAMW,GAAN,CAASF,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;EACD,CAHM;;EAKAhB,oBAAP,UAAWe,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAG,IAAIhB,GAAJ,CAAQH,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAR,CAAZ;IACA,OAAO,IAAIf,GAAJ,CAAQS,iBAAMG,GAAN,CAASM,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;EACD,CAHM;;EAKAhB,oBAAP,UAAWe,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAG,IAAIhB,GAAJ,CAAQH,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAR,CAAZ;IACA,OAAO,IAAIf,GAAJ,CAAQS,iBAAMY,GAAN,CAASH,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;EACD,CAHM;;EAIT;AAAC,CA5CD,CAAyBZ,oBAAzB;;AAAaR;;AA8Cb,IAAM0B,IAAI,GAAGlB,qBAAQmB,KAAR,EAAb;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;AAAA;EAAyBhB;;EACvB,aAAYC,GAAZ,EAA+B;IAA/B;;IACE,IAAMgB,IAAI,GAAG,IAAIpB,oBAAJ,CAAY,CAACI,GAAG,SAAH,OAAG,WAAH,SAAO,CAAR,EAAWF,QAAX,EAAZ,CAAb;;IACAmB,0BAAMD,IAAI,CAACE,QAAL,CAAc,CAAd,CAAN,KAAuB,IAAvB;;EACD;;EAEMxB,yBAAP;IACE,OAAO,KAAKQ,OAAL,EAAP;EACD,CAFM,CANT,CAUE;;;EACOR,sBAAP;IACE,OAAO,IAAIF,GAAJ,CAAQ,IAAR,CAAP;EACD,CAFM,CAXT,CAeE;;;EAEOE,oBAAP,UAAWa,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAGnB,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAZ;;IACA,IAAIC,GAAG,YAAYhB,GAAnB,EAAwB;MACtB,OAAO,IAAIA,GAAJ,CAAQ,IAAR,EAAciB,GAAd,CAAkBD,GAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAId,GAAJ,CAAQ,KAAKyB,IAAL,CAAUX,GAAV,CAAR,CAAP;IACD;EACF,CAPM;;EASAd,oBAAP,UAAWa,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAGnB,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAZ;;IACA,IAAIC,GAAG,YAAYhB,GAAnB,EAAwB;MACtB,OAAO,IAAIA,GAAJ,CAAQ,IAAR,EAAcmB,GAAd,CAAkBH,GAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAId,GAAJ,CAAQ,KAAK0B,KAAL,CAAWZ,GAAX,CAAR,CAAP;IACD;EACF,CAPM;;EASAd,oBAAP,UAAWa,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAGnB,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAZ;;IACA,IAAIC,GAAG,YAAYhB,GAAnB,EAAwB;MACtB,OAAO,IAAIA,GAAJ,CAAQ,IAAR,EAAcoB,GAAd,CAAkBJ,GAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAId,GAAJ,CAAQ,KAAK2B,KAAL,CAAWb,GAAX,CAAR,CAAP;IACD;EACF,CAPM;;EASAd,oBAAP,UAAWa,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAGnB,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAZ;;IACA,IAAIC,GAAG,YAAYhB,GAAnB,EAAwB;MACtB,OAAO,IAAIA,GAAJ,CAAQ,IAAR,EAAcY,GAAd,CAAkBI,GAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAId,GAAJ,CAAQO,iBAAMG,GAAN,CAASM,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;IACD;EACF,CAPM;;EASAd,oBAAP,UAAWa,KAAX,EAA+B;IAC7B,IAAMC,GAAG,GAAGnB,OAAO,CAACC,KAAR,CAAciB,KAAd,CAAZ;;IACA,IAAIC,GAAG,YAAYhB,GAAnB,EAAwB;MACtB,OAAO,IAAIA,GAAJ,CAAQ,IAAR,EAAcqB,GAAd,CAAkBL,GAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAId,GAAJ,CAAQO,iBAAMY,GAAN,CAASH,IAAT,CAAS,IAAT,EAAUF,GAAV,CAAR,CAAP;IACD;EACF,CAPM;;EAQT;AAAC,CA7DD,CAAyBM,IAAzB;;AAAa1B;AA+Db;;;;;;;;;;;;;;;;;AAgBA,SAAgBkC,GAAhB,CAAoBC,OAApB,EAAiD;EAC/C,OAAO,IAAI/B,GAAJ,CAAQ+B,OAAO,CAAC,CAAD,CAAf,CAAP;AACD;;AAFDnC;AAIA;;;;;;;;;;;;;;;;;AAiBA,SAAgBoC,GAAhB,CAAoBD,OAApB,EAAiD;EAC/C,OAAO,IAAI7B,GAAJ,CAAQ6B,OAAO,CAAC,CAAD,CAAf,CAAP;AACD;;AAFDnC","names":["exports","Numeric","parse","value","Dec","includes","Int","_value","decimal_js_1","isInteger","toString","__extends","arg","_super","toFixed","prec","div","Math","pow","other","val","add","call","sub","mul","mod","_Int","clone","_arg","_this","divToInt","plus","minus","times","dec","strings","int"],"sources":["../../src/core/numeric.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}