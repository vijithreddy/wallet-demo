{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiSignature = void 0;\n\nvar PublicKey_1 = require(\"./PublicKey\");\n\nvar CompactBitArray_1 = require(\"./CompactBitArray\");\n\nvar SignatureV2_1 = require(\"./SignatureV2\");\n\nvar MultiSignature =\n/** @class */\nfunction () {\n  /**\n   * MultiSignature constructor\n   * public_keys order must be guaranteed\n   */\n  function MultiSignature(multisig_pubkey) {\n    this.multisig_pubkey = multisig_pubkey;\n    var n = multisig_pubkey.pubkeys.length;\n    this.bitarray = CompactBitArray_1.CompactBitArray.fromBits(n);\n    this.signatures = [];\n  }\n\n  MultiSignature.prototype.appendSignature = function (signature_data, index) {\n    var newSigIndex = this.bitarray.numTrueBitsBefore(index); // Signature already exists, just replace the value there\n\n    if (this.bitarray.getIndex(index)) {\n      this.signatures[newSigIndex] = signature_data;\n      return;\n    }\n\n    this.bitarray.setIndex(index, true); // Optimization if the index is the greatest index\n\n    if (newSigIndex == this.signatures.length) {\n      this.signatures.push(signature_data);\n      return;\n    }\n\n    this.signatures.splice(newSigIndex, 0, signature_data);\n  }; // adds a signature to the multisig, at the index in\n  // keys corresponding to the provided pubkey.\n\n\n  MultiSignature.prototype.appendSignatureFromPubKey = function (signature_data, public_key) {\n    var index = this.multisig_pubkey.pubkeys.findIndex(function (v) {\n      return v.key === public_key.key;\n    });\n\n    if (index == -1) {\n      throw new Error(\"provided key doesn't exist in public_keys\");\n    }\n\n    this.appendSignature(signature_data, index);\n  };\n\n  MultiSignature.prototype.appendSignatureV2s = function (signatures) {\n    for (var _i = 0, signatures_1 = signatures; _i < signatures_1.length; _i++) {\n      var signature = signatures_1[_i];\n\n      if (!(signature.public_key instanceof PublicKey_1.SimplePublicKey)) {\n        throw new Error('non-SimplePublicKey cannot be used to sign multisig');\n      }\n\n      this.appendSignatureFromPubKey(signature.data, signature.public_key);\n    }\n  };\n\n  MultiSignature.prototype.toSignatureDescriptor = function () {\n    return new SignatureV2_1.SignatureV2.Descriptor(new SignatureV2_1.SignatureV2.Descriptor.Multi(this.bitarray, this.signatures));\n  };\n\n  return MultiSignature;\n}();\n\nexports.MultiSignature = MultiSignature;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AAAA;AAAA;EAIE;;;;EAIA,wBAAmBA,eAAnB,EAAgE;IAA7C;IACjB,IAAMC,CAAC,GAAGD,eAAe,CAACE,OAAhB,CAAwBC,MAAlC;IACA,KAAKC,QAAL,GAAgBC,kCAAgBC,QAAhB,CAAyBL,CAAzB,CAAhB;IACA,KAAKM,UAAL,GAAkB,EAAlB;EACD;;EAEMC,2CAAP,UACEC,cADF,EAEEC,KAFF,EAEe;IAEb,IAAMC,WAAW,GAAG,KAAKP,QAAL,CAAcQ,iBAAd,CAAgCF,KAAhC,CAApB,CAFa,CAIb;;IACA,IAAI,KAAKN,QAAL,CAAcS,QAAd,CAAuBH,KAAvB,CAAJ,EAAmC;MACjC,KAAKH,UAAL,CAAgBI,WAAhB,IAA+BF,cAA/B;MACA;IACD;;IAED,KAAKL,QAAL,CAAcU,QAAd,CAAuBJ,KAAvB,EAA8B,IAA9B,EAVa,CAYb;;IACA,IAAIC,WAAW,IAAI,KAAKJ,UAAL,CAAgBJ,MAAnC,EAA2C;MACzC,KAAKI,UAAL,CAAgBQ,IAAhB,CAAqBN,cAArB;MACA;IACD;;IAED,KAAKF,UAAL,CAAgBS,MAAhB,CAAuBL,WAAvB,EAAoC,CAApC,EAAuCF,cAAvC;EACD,CArBM,CAdT,CAqCE;EACA;;;EACOD,qDAAP,UACEC,cADF,EAEEQ,UAFF,EAE6B;IAE3B,IAAMP,KAAK,GAAG,KAAKV,eAAL,CAAqBE,OAArB,CAA6BgB,SAA7B,CACZ,aAAC;MAAI,QAAC,CAACC,GAAF,KAAUF,UAAU,CAACE,GAArB;IAAwB,CADjB,CAAd;;IAGA,IAAIT,KAAK,IAAI,CAAC,CAAd,EAAiB;MACf,MAAM,IAAIU,KAAJ,CAAU,2CAAV,CAAN;IACD;;IAED,KAAKC,eAAL,CAAqBZ,cAArB,EAAqCC,KAArC;EACD,CAZM;;EAcAF,8CAAP,UAA0BD,UAA1B,EAAmD;IACjD,KAAwB,qCAAxB,EAAwBe,wBAAxB,EAAwBA,IAAxB,EAAoC;MAA/B,IAAMC,SAAS,mBAAf;;MACH,IAAI,EAAEA,SAAS,CAACN,UAAV,YAAgCO,2BAAlC,CAAJ,EAAwD;QACtD,MAAM,IAAIJ,KAAJ,CAAU,qDAAV,CAAN;MACD;;MAED,KAAKK,yBAAL,CAA+BF,SAAS,CAACG,IAAzC,EAA+CH,SAAS,CAACN,UAAzD;IACD;EACF,CARM;;EAUAT,iDAAP;IACE,OAAO,IAAImB,0BAAYC,UAAhB,CACL,IAAID,0BAAYC,UAAZ,CAAuBC,KAA3B,CAAiC,KAAKzB,QAAtC,EAAgD,KAAKG,UAArD,CADK,CAAP;EAGD,CAJM;;EAKT;AAAC,CApED;;AAAauB","names":["multisig_pubkey","n","pubkeys","length","bitarray","CompactBitArray_1","fromBits","signatures","MultiSignature","signature_data","index","newSigIndex","numTrueBitsBefore","getIndex","setIndex","push","splice","public_key","findIndex","key","Error","appendSignature","_i","signature","PublicKey_1","appendSignatureFromPubKey","data","SignatureV2_1","Descriptor","Multi","exports"],"sources":["../../src/core/MultiSignature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}