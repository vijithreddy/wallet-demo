{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\n\nvar Tx_1 = require(\"./Tx\");\n\nvar abci_1 = require(\"@terra-money/terra.proto/cosmos/base/abci/v1beta1/abci\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\n\n\nvar TxInfo =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param height height of the block in which the transaction was included.\n   * @param txhash transaction's hash.\n   * @param raw_log raw log information, as a string.\n   * @param logs log information\n   * @param gas_wanted gas limited submitted in fee\n   * @param gas_used actual gas consumption\n   * @param tx transaction content\n   * @param timestamp time of inclusion\n   * @param code error code\n   */\n  function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n    this.height = height;\n    this.txhash = txhash;\n    this.raw_log = raw_log;\n    this.logs = logs;\n    this.gas_wanted = gas_wanted;\n    this.gas_used = gas_used;\n    this.tx = tx;\n    this.timestamp = timestamp;\n    this.code = code;\n    this.codespace = codespace;\n  }\n\n  TxInfo.fromProto = function (proto) {\n    return new TxInfo(proto.height.toNumber(), proto.txhash, proto.rawLog, proto.logs.map(function (log) {\n      return TxLog.fromProto(log);\n    }), proto.gasWanted.toNumber(), proto.gasUsed.toNumber(), Tx_1.Tx.unpackAny(proto.tx), proto.timestamp, proto.code, proto.codespace);\n  };\n\n  TxInfo.fromData = function (data) {\n    return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs.map(function (log) {\n      return TxLog.fromData(log);\n    }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), Tx_1.Tx.fromData(data.tx), data.timestamp, data.code, data.codespace);\n  };\n\n  return TxInfo;\n}();\n\nexports.TxInfo = TxInfo;\nvar EventsByType;\n\n(function (EventsByType) {\n  function parse(eventAmino) {\n    var events = {};\n    eventAmino.forEach(function (ev) {\n      ev.attributes.forEach(function (attr) {\n        if (!(ev.type in events)) {\n          events[ev.type] = {};\n        }\n\n        if (!(attr.key in events[ev.type])) {\n          events[ev.type][attr.key] = [];\n        }\n\n        events[ev.type][attr.key].push(attr.value);\n      });\n    });\n    return events;\n  }\n\n  EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\n\nvar TxLog =\n/** @class */\nfunction () {\n  function TxLog(msg_index, log, events) {\n    this.msg_index = msg_index;\n    this.log = log;\n    this.events = events;\n    this.eventsByType = EventsByType.parse(this.events);\n  }\n\n  TxLog.fromData = function (data) {\n    return new TxLog(data.msg_index, data.log, data.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n\n  TxLog.prototype.toData = function () {\n    var _a = this,\n        msg_index = _a.msg_index,\n        log = _a.log,\n        events = _a.events;\n\n    return {\n      msg_index: msg_index,\n      log: log,\n      events: events\n    };\n  };\n\n  TxLog.fromProto = function (proto) {\n    return new TxLog(proto.msgIndex, proto.log, proto.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n\n  TxLog.prototype.toProto = function () {\n    var _a = this,\n        msg_index = _a.msg_index,\n        log = _a.log,\n        events = _a.events;\n\n    return abci_1.ABCIMessageLog.fromPartial({\n      msgIndex: msg_index,\n      log: log,\n      events: events\n    });\n  };\n\n  return TxLog;\n}();\n\nexports.TxLog = TxLog;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAMA;;;;;;AAIA;AAAA;AAAA;EACE;;;;;;;;;;;;EAYA,gBACSA,MADT,EAESC,MAFT,EAGSC,OAHT,EAISC,IAJT,EAKSC,UALT,EAMSC,QANT,EAOSC,EAPT,EAQSC,SART,EASSC,IATT,EAUSC,SAVT,EAU2B;IATlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACL;;EAEUC,mBAAd,UAAwBC,KAAxB,EAA2C;IACzC,OAAO,IAAID,MAAJ,CACLC,KAAK,CAACX,MAAN,CAAaY,QAAb,EADK,EAELD,KAAK,CAACV,MAFD,EAGLU,KAAK,CAACE,MAHD,EAILF,KAAK,CAACR,IAAN,CAAWW,GAAX,CAAe,eAAG;MAAI,YAAK,CAACC,SAAN,CAAgBC,GAAhB;IAAoB,CAA1C,CAJK,EAKLL,KAAK,CAACM,SAAN,CAAgBL,QAAhB,EALK,EAMLD,KAAK,CAACO,OAAN,CAAcN,QAAd,EANK,EAOLO,QAAGC,SAAH,CAAaT,KAAK,CAACL,EAAnB,CAPK,EAQLK,KAAK,CAACJ,SARD,EASLI,KAAK,CAACH,IATD,EAULG,KAAK,CAACF,SAVD,CAAP;EAYD,CAba;;EAeAC,kBAAd,UAAuBW,IAAvB,EAAwC;IACtC,OAAO,IAAIX,MAAJ,CACLY,MAAM,CAACC,QAAP,CAAgBF,IAAI,CAACrB,MAArB,CADK,EAELqB,IAAI,CAACpB,MAFA,EAGLoB,IAAI,CAACnB,OAHA,EAILmB,IAAI,CAAClB,IAAL,CAAUW,GAAV,CAAc,eAAG;MAAI,YAAK,CAACU,QAAN,CAAeR,GAAf;IAAmB,CAAxC,CAJK,EAKLM,MAAM,CAACC,QAAP,CAAgBF,IAAI,CAACjB,UAArB,CALK,EAMLkB,MAAM,CAACC,QAAP,CAAgBF,IAAI,CAAChB,QAArB,CANK,EAOLc,QAAGK,QAAH,CAAYH,IAAI,CAACf,EAAjB,CAPK,EAQLe,IAAI,CAACd,SARA,EASLc,IAAI,CAACb,IATA,EAULa,IAAI,CAACZ,SAVA,CAAP;EAYD,CAba;;EAchB;AAAC,CAvDD;;AAAagB;AAyEb,IAAiBC,YAAjB;;AAAA,WAAiBA,YAAjB,EAA6B;EAC3B,SAAgBC,KAAhB,CAAsBC,UAAtB,EAAyC;IACvC,IAAMC,MAAM,GAAiB,EAA7B;IACAD,UAAU,CAACE,OAAX,CAAmB,cAAE;MACnBC,EAAE,CAACC,UAAH,CAAcF,OAAd,CAAsB,gBAAI;QACxB,IAAI,EAAEC,EAAE,CAACE,IAAH,IAAWJ,MAAb,CAAJ,EAA0B;UACxBA,MAAM,CAACE,EAAE,CAACE,IAAJ,CAAN,GAAkB,EAAlB;QACD;;QAED,IAAI,EAAEC,IAAI,CAACC,GAAL,IAAYN,MAAM,CAACE,EAAE,CAACE,IAAJ,CAApB,CAAJ,EAAoC;UAClCJ,MAAM,CAACE,EAAE,CAACE,IAAJ,CAAN,CAAgBC,IAAI,CAACC,GAArB,IAA4B,EAA5B;QACD;;QAEDN,MAAM,CAACE,EAAE,CAACE,IAAJ,CAAN,CAAgBC,IAAI,CAACC,GAArB,EAA0BC,IAA1B,CAA+BF,IAAI,CAACG,KAApC;MACD,CAVD;IAWD,CAZD;IAaA,OAAOR,MAAP;EACD;;EAhBeH,qBAAKC,KAAL;AAiBjB,CAlBD,EAAiBD,YAAY,GAAZD,gDAAY,EAAZ,CAAjB;;AAoBA;AAAA;AAAA;EAGE,eACSa,SADT,EAEStB,GAFT,EAGSa,MAHT,EAGwB;IAFf;IACA;IACA;IAEP,KAAKU,YAAL,GAAoBb,YAAY,CAACC,KAAb,CAAmB,KAAKE,MAAxB,CAApB;EACD;;EAEaW,iBAAd,UAAuBnB,IAAvB,EAAuC;IACrC,OAAO,IAAImB,KAAJ,CACLnB,IAAI,CAACiB,SADA,EAELjB,IAAI,CAACL,GAFA,EAGLK,IAAI,CAACQ,MAAL,CAAYf,GAAZ,CAAgB,aAAC;MACf,OAAO;QACLmB,IAAI,EAAEQ,CAAC,CAACR,IADH;QAELD,UAAU,EAAES,CAAC,CAACT,UAAF,CAAalB,GAAb,CAAiB,gBAAI;UAC/B,OAAO;YACLqB,GAAG,EAAED,IAAI,CAACC,GADL;YAELE,KAAK,EAAEH,IAAI,CAACG;UAFP,CAAP;QAID,CALW;MAFP,CAAP;IASD,CAVD,CAHK,CAAP;EAeD,CAhBa;;EAkBPG,yBAAP;IACQ,SAA6B,IAA7B;IAAA,IAAEF,SAAS,eAAX;IAAA,IAAatB,GAAG,SAAhB;IAAA,IAAkBa,MAAM,YAAxB;;IACN,OAAO;MACLS,SAAS,WADJ;MAELtB,GAAG,KAFE;MAGLa,MAAM;IAHD,CAAP;EAKD,CAPM;;EASOW,kBAAd,UAAwB7B,KAAxB,EAA0C;IACxC,OAAO,IAAI6B,KAAJ,CACL7B,KAAK,CAAC+B,QADD,EAEL/B,KAAK,CAACK,GAFD,EAGLL,KAAK,CAACkB,MAAN,CAAaf,GAAb,CAAiB,aAAC;MAChB,OAAO;QACLmB,IAAI,EAAEQ,CAAC,CAACR,IADH;QAELD,UAAU,EAAES,CAAC,CAACT,UAAF,CAAalB,GAAb,CAAiB,gBAAI;UAC/B,OAAO;YACLqB,GAAG,EAAED,IAAI,CAACC,GADL;YAELE,KAAK,EAAEH,IAAI,CAACG;UAFP,CAAP;QAID,CALW;MAFP,CAAP;IASD,CAVD,CAHK,CAAP;EAeD,CAhBa;;EAkBPG,0BAAP;IACQ,SAA6B,IAA7B;IAAA,IAAEF,SAAS,eAAX;IAAA,IAAatB,GAAG,SAAhB;IAAA,IAAkBa,MAAM,YAAxB;;IACN,OAAOc,sBAAkBC,WAAlB,CAA8B;MACnCF,QAAQ,EAAEJ,SADyB;MAEnCtB,GAAG,EAAEA,GAF8B;MAGnCa,MAAM;IAH6B,CAA9B,CAAP;EAKD,CAPM;;EAQT;AAAC,CAhED;;AAAaJ","names":["height","txhash","raw_log","logs","gas_wanted","gas_used","tx","timestamp","code","codespace","TxInfo","proto","toNumber","rawLog","map","fromProto","log","gasWanted","gasUsed","Tx_1","unpackAny","data","Number","parseInt","fromData","exports","EventsByType","parse","eventAmino","events","forEach","ev","attributes","type","attr","key","push","value","msg_index","eventsByType","TxLog","e","msgIndex","abci_1","fromPartial"],"sources":["../../src/core/TxInfo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}