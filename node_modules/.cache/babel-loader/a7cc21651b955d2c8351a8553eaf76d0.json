{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgSwapSend = void 0;\n\nvar json_1 = require(\"../../../util/json\");\n\nvar Coin_1 = require(\"../../Coin\");\n\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\n\nvar tx_1 = require(\"@terra-money/terra.proto/terra/market/v1beta1/tx\");\n/**\n * Executes a market swap send between 2 denominations at the exchange rate registered by the\n * Oracle module. The sender account will lose the amount of coins offered, and receiver will receive funds\n * in the requested denomination after a swap and send fee has been applied.\n */\n\n\nvar MsgSwapSend =\n/** @class */\nfunction (_super) {\n  __extends(MsgSwapSend, _super);\n  /**\n   * @param from_address sender's account address\n   * @param to_address receiver's account address\n   * @param offer_coin coin to be swapped (from)\n   * @param ask_denom desired denomination (to)\n   */\n\n\n  function MsgSwapSend(from_address, to_address, offer_coin, ask_denom) {\n    var _this = _super.call(this) || this;\n\n    _this.from_address = from_address;\n    _this.to_address = to_address;\n    _this.offer_coin = offer_coin;\n    _this.ask_denom = ask_denom;\n    return _this;\n  }\n\n  MsgSwapSend.fromAmino = function (data) {\n    var _a = data.value,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n    return new MsgSwapSend(from_address, to_address, Coin_1.Coin.fromAmino(offer_coin), ask_denom);\n  };\n\n  MsgSwapSend.prototype.toAmino = function () {\n    var _a = this,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n\n    return {\n      type: 'market/MsgSwapSend',\n      value: {\n        from_address: from_address,\n        to_address: to_address,\n        offer_coin: offer_coin.toAmino(),\n        ask_denom: ask_denom\n      }\n    };\n  };\n\n  MsgSwapSend.fromProto = function (proto) {\n    return new MsgSwapSend(proto.fromAddress, proto.toAddress, Coin_1.Coin.fromProto(proto.offerCoin), proto.askDenom);\n  };\n\n  MsgSwapSend.prototype.toProto = function () {\n    var _a = this,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n\n    return tx_1.MsgSwapSend.fromPartial({\n      askDenom: ask_denom,\n      fromAddress: from_address,\n      offerCoin: offer_coin.toProto(),\n      toAddress: to_address\n    });\n  };\n\n  MsgSwapSend.prototype.packAny = function () {\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.market.v1beta1.MsgSwapSend',\n      value: tx_1.MsgSwapSend.encode(this.toProto()).finish()\n    });\n  };\n\n  MsgSwapSend.unpackAny = function (msgAny) {\n    return MsgSwapSend.fromProto(tx_1.MsgSwapSend.decode(msgAny.value));\n  };\n\n  MsgSwapSend.fromData = function (data) {\n    var from_address = data.from_address,\n        to_address = data.to_address,\n        offer_coin = data.offer_coin,\n        ask_denom = data.ask_denom;\n    return new MsgSwapSend(from_address, to_address, Coin_1.Coin.fromData(offer_coin), ask_denom);\n  };\n\n  MsgSwapSend.prototype.toData = function () {\n    var _a = this,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n\n    return {\n      '@type': '/terra.market.v1beta1.MsgSwapSend',\n      from_address: from_address,\n      to_address: to_address,\n      offer_coin: offer_coin.toData(),\n      ask_denom: ask_denom\n    };\n  };\n\n  return MsgSwapSend;\n}(json_1.JSONSerializable);\n\nexports.MsgSwapSend = MsgSwapSend;","map":{"version":3,"mappings":"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","names":["__extends","from_address","to_address","offer_coin","ask_denom","_super","_this","MsgSwapSend","data","Coin_1","fromAmino","type","value","toAmino","proto","fromAddress","toAddress","fromProto","offerCoin","askDenom","tx_1","fromPartial","toProto","any_1","typeUrl","encode","finish","msgAny","decode","fromData","toData","json_1","exports"],"sources":["../../../../src/core/market/msgs/MsgSwapSend.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}