{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgAggregateExchangeRateVote = exports.aggregateVoteHash = void 0;\n\nvar SHA256_1 = require(\"jscrypto/SHA256\");\n\nvar json_1 = require(\"../../../util/json\");\n\nvar MsgAggregateExchangeRatePrevote_1 = require(\"./MsgAggregateExchangeRatePrevote\");\n\nvar Coins_1 = require(\"../../Coins\");\n\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\n\nvar tx_1 = require(\"@terra-money/terra.proto/terra/oracle/v1beta1/tx\");\n/**\n * Calculates the aggregate vote hash\n * @param exchangeRates exchange rates\n * @param salt salt\n * @param validator validator operator address\n */\n\n\nfunction aggregateVoteHash(exchangeRates, salt, validator) {\n  var payload = \"\".concat(salt, \":\").concat(exchangeRates.toDecCoins().toString(), \":\").concat(validator);\n  return SHA256_1.SHA256.hash(payload).toString().substring(0, 40);\n}\n\nexports.aggregateVoteHash = aggregateVoteHash;\n/**\n * Aggregate analog of MsgExchangeRateVote: submits an oracle vote for multiple denominations\n * through a single message rather than multiple messages.\n */\n\nvar MsgAggregateExchangeRateVote =\n/** @class */\nfunction (_super) {\n  __extends(MsgAggregateExchangeRateVote, _super);\n  /**\n   * @param exchange_rate exchange rates\n   * @param salt salt\n   * @param feeder feeder address\n   * @param validator validator operator address\n   */\n\n\n  function MsgAggregateExchangeRateVote(exchange_rates, salt, feeder, validator) {\n    var _this = _super.call(this) || this;\n\n    _this.salt = salt;\n    _this.feeder = feeder;\n    _this.validator = validator;\n    _this.exchange_rates = new Coins_1.Coins(exchange_rates).toDecCoins();\n    return _this;\n  }\n\n  MsgAggregateExchangeRateVote.fromAmino = function (data) {\n    var _a = data.value,\n        exchange_rates = _a.exchange_rates,\n        salt = _a.salt,\n        feeder = _a.feeder,\n        validator = _a.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n\n  MsgAggregateExchangeRateVote.prototype.toAmino = function () {\n    var _a = this,\n        exchange_rates = _a.exchange_rates,\n        salt = _a.salt,\n        feeder = _a.feeder,\n        validator = _a.validator;\n\n    return {\n      type: 'oracle/MsgAggregateExchangeRateVote',\n      value: {\n        exchange_rates: exchange_rates.toDecCoins().toString(),\n        salt: salt,\n        feeder: feeder,\n        validator: validator\n      }\n    };\n  };\n\n  MsgAggregateExchangeRateVote.fromData = function (proto) {\n    var exchange_rates = proto.exchange_rates,\n        salt = proto.salt,\n        feeder = proto.feeder,\n        validator = proto.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n\n  MsgAggregateExchangeRateVote.prototype.toData = function () {\n    var _a = this,\n        exchange_rates = _a.exchange_rates,\n        salt = _a.salt,\n        feeder = _a.feeder,\n        validator = _a.validator;\n\n    return {\n      '@type': '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      exchange_rates: exchange_rates.toDecCoins().toString(),\n      salt: salt,\n      feeder: feeder,\n      validator: validator\n    };\n  };\n\n  MsgAggregateExchangeRateVote.fromProto = function (proto) {\n    var xrs = Coins_1.Coins.fromString(proto.exchangeRates);\n    return new MsgAggregateExchangeRateVote(xrs, proto.salt, proto.feeder, proto.validator);\n  };\n\n  MsgAggregateExchangeRateVote.prototype.toProto = function () {\n    var _a = this,\n        exchange_rates = _a.exchange_rates,\n        salt = _a.salt,\n        feeder = _a.feeder,\n        validator = _a.validator;\n\n    return tx_1.MsgAggregateExchangeRateVote.fromPartial({\n      exchangeRates: exchange_rates.toString(),\n      feeder: feeder,\n      salt: salt,\n      validator: validator\n    });\n  };\n  /**\n   * Gets the aggregate vote hash for the MsgAggregateExchangeRateVote, for the creation of\n   *  the corresponding prevote message.\n   */\n\n\n  MsgAggregateExchangeRateVote.prototype.getAggregateVoteHash = function () {\n    return aggregateVoteHash(this.exchange_rates, this.salt, this.validator);\n  };\n  /**\n   * You can generate the corresponding aggregate prevote message.\n   * This will return a [[MsgAggregateExchangeRatePrevote]] with the proper vote hash and values,\n   * determined by the current attributes of the object.\n   *\n   * @returns the corresponding prevote message to send\n   */\n\n\n  MsgAggregateExchangeRateVote.prototype.getPrevote = function () {\n    return new MsgAggregateExchangeRatePrevote_1.MsgAggregateExchangeRatePrevote(this.getAggregateVoteHash(), this.feeder, this.validator);\n  };\n\n  MsgAggregateExchangeRateVote.prototype.packAny = function () {\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      value: tx_1.MsgAggregateExchangeRateVote.encode(this.toProto()).finish()\n    });\n  };\n\n  MsgAggregateExchangeRateVote.unpackAny = function (msgAny) {\n    return MsgAggregateExchangeRateVote.fromProto(tx_1.MsgAggregateExchangeRateVote.decode(msgAny.value));\n  };\n\n  return MsgAggregateExchangeRateVote;\n}(json_1.JSONSerializable);\n\nexports.MsgAggregateExchangeRateVote = MsgAggregateExchangeRateVote;","map":{"version":3,"mappings":"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","names":["aggregateVoteHash","exchangeRates","salt","validator","payload","concat","toDecCoins","toString","SHA256_1","hash","substring","exports","__extends","exchange_rates","feeder","_super","_this","Coins_1","MsgAggregateExchangeRateVote","data","xrs","fromString","type","value","proto","tx_1","fromPartial","MsgAggregateExchangeRatePrevote_1","getAggregateVoteHash","any_1","typeUrl","encode","toProto","finish","msgAny","fromProto","decode","json_1"],"sources":["../../../../src/core/oracle/msgs/MsgAggregateExchangeRateVote.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}