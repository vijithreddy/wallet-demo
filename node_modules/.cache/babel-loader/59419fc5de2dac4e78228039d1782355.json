{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignatureV2 = void 0;\n\nvar PublicKey_1 = require(\"./PublicKey\");\n\nvar Tx_1 = require(\"./Tx\");\n\nvar CompactBitArray_1 = require(\"./CompactBitArray\");\n\nvar signing_1 = require(\"@terra-money/terra.proto/cosmos/tx/signing/v1beta1/signing\");\n\nvar multisig_1 = require(\"@terra-money/terra.proto/cosmos/crypto/multisig/v1beta1/multisig\");\n\nvar SignatureV2 =\n/** @class */\nfunction () {\n  function SignatureV2(public_key, data, sequence) {\n    this.public_key = public_key;\n    this.data = data;\n    this.sequence = sequence;\n  }\n\n  SignatureV2.fromData = function (data) {\n    return new SignatureV2(PublicKey_1.PublicKey.fromData(data.public_key), SignatureV2.Descriptor.fromData(data.data), Number.parseInt(data.sequence));\n  };\n\n  SignatureV2.fromAmino = function (data) {\n    return new SignatureV2(PublicKey_1.PublicKey.fromAmino(data.pub_key), new SignatureV2.Descriptor(new SignatureV2.Descriptor.Single(SignatureV2.SignMode.SIGN_MODE_LEGACY_AMINO_JSON, data.signature)), 0);\n  };\n\n  return SignatureV2;\n}();\n\nexports.SignatureV2 = SignatureV2;\n\n(function (SignatureV2) {\n  SignatureV2.SignMode = signing_1.SignMode;\n\n  var Descriptor =\n  /** @class */\n  function () {\n    function Descriptor(data) {\n      data instanceof Descriptor.Single ? this.single = data : this.multi = data;\n    }\n\n    Descriptor.fromData = function (data) {\n      if (data.single) {\n        return new Descriptor(Descriptor.Single.fromData(data.single));\n      }\n\n      if (data.multi) {\n        return new Descriptor(Descriptor.Multi.fromData(data.multi));\n      }\n\n      throw new Error('must be one of single or multi');\n    };\n\n    Descriptor.prototype.toModeInfoAndSignature = function () {\n      if (this.single) {\n        var sigData = this.single;\n        return [new Tx_1.ModeInfo(new Tx_1.ModeInfo.Single(sigData.mode)), Buffer.from(sigData.signature, 'base64')];\n      }\n\n      if (this.multi) {\n        var sigData = this.multi;\n        var modeInfos = [];\n        var signatures = [];\n\n        for (var _i = 0, _a = sigData.signatures; _i < _a.length; _i++) {\n          var signature = _a[_i];\n\n          var _b = signature.toModeInfoAndSignature(),\n              modeInfo = _b[0],\n              sigBytes = _b[1];\n\n          modeInfos.push(modeInfo);\n          signatures.push(sigBytes);\n        }\n\n        var multisigBytes = multisig_1.MultiSignature.encode(multisig_1.MultiSignature.fromPartial({\n          signatures: signatures\n        })).finish();\n        return [new Tx_1.ModeInfo(new Tx_1.ModeInfo.Multi(sigData.bitarray, modeInfos)), multisigBytes];\n      }\n\n      throw new Error('invalid signature descriptor');\n    };\n\n    return Descriptor;\n  }();\n\n  SignatureV2.Descriptor = Descriptor;\n\n  (function (Descriptor) {\n    var Single =\n    /** @class */\n    function () {\n      function Single(mode, signature) {\n        this.mode = mode;\n        this.signature = signature;\n      }\n\n      Single.fromData = function (data) {\n        return new Single((0, signing_1.signModeFromJSON)(data.mode), data.signature);\n      };\n\n      return Single;\n    }();\n\n    Descriptor.Single = Single;\n\n    var Multi =\n    /** @class */\n    function () {\n      function Multi(bitarray, signatures) {\n        this.bitarray = bitarray;\n        this.signatures = signatures;\n      }\n\n      Multi.fromData = function (data) {\n        return new Multi(CompactBitArray_1.CompactBitArray.fromData(data.bitarray), data.signatures.map(function (v) {\n          return Descriptor.fromData(v);\n        }));\n      };\n\n      return Multi;\n    }();\n\n    Descriptor.Multi = Multi;\n  })(Descriptor = SignatureV2.Descriptor || (SignatureV2.Descriptor = {}));\n})(SignatureV2 = exports.SignatureV2 || (exports.SignatureV2 = {}));\n\nexports.SignatureV2 = SignatureV2;","map":{"version":3,"mappings":"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","names":["public_key","data","sequence","SignatureV2","PublicKey_1","fromData","Descriptor","Number","parseInt","fromAmino","pub_key","Single","SignMode","SIGN_MODE_LEGACY_AMINO_JSON","signature","exports","signing_1","single","multi","Multi","Error","sigData","Tx_1","mode","Buffer","from","modeInfos","signatures","_i","toModeInfoAndSignature","modeInfo","sigBytes","push","multisigBytes","multisig_1","encode","fromPartial","finish","bitarray","CompactBitArray_1","map","v"],"sources":["../../src/core/SignatureV2.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}