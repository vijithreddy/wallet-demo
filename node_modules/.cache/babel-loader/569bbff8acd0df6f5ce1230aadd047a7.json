{"ast":null,"code":"import { JsonRpcProvider } from '@ethersproject/providers';\n/**\r\n * The supported networks by CoinbaseCloud. Note that some functions are not available\r\n * on all networks. Please refer to the CoinbaseCloud documentation for more details\r\n * {@link https://docs.cloud.coinbase.com/node/reference/welcome-to-node}\r\n *\r\n * @public\r\n */\n\nvar Network;\n\n(function (Network) {\n  Network[\"ETH_MAINNET\"] = \"eth-mainnet\";\n  Network[\"ETH_GOERLI\"] = \"eth-goerli\";\n})(Network || (Network = {}));\n/**\r\n * Currently, the Advanced APIs either expect optional parameters to have the correct format\r\n * or not be present at all. This does not work well with how the JsonRpcProvider sends JSON-RPC\r\n * requests since it will send those as null. To work around that, we define the default values\r\n * for these optional parameters here in the client SDK.\r\n */\n\n\nconst DEFAULT_ADDRESS_FILTER = 'SENDER_OR_RECEIVER';\n/**\r\n * 1 Trillion. This should be the same as the default value of 'latest' block.\r\n */\n\nconst DEFAULT_BLOCK_END = '0x174876e800';\nconst DEFAULT_SORTING_PREFERENCE = 'desc';\nconst DEFAULT_PAGE_SIZE = 1000;\nconst DEFAULT_PAGE_NUMBER = 1;\nconst DEFAULT_EVENT_SIGNATURE_HASHES = [];\n/**\r\n * The Advanced API simplifies access to blockchain data by offering data cuts which\r\n * are hard to get via the native Ethereum API, and offers aggregated and filtered\r\n * data in a single API call. The Advanced API provides access to token balances for\r\n * accounts, transactions and transfers for accounts, smart contract event logs, and more.\r\n *\r\n * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-overview}\r\n */\n\nclass AdvancedApis {\n  /** @internal */\n  constructor(provider) {\n    this.provider = provider;\n  }\n  /**\r\n   * Get an accurate balance for a single token and a single account address.\r\n   *\r\n   * The balance takes into account transactions, internal transfers, and any\r\n   * supported token transfers. The caller can expect low latency from this\r\n   * method compared to the getBalances method.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getsinglebalance}\r\n   *\r\n   * @param address - An account address or a contract address.\r\n   * @param contract - Token identifier. For Ethereum the token identifier is the token contract address.\r\n   * @public\r\n   */\n\n\n  getSingleBalance(address, contract) {\n    return this.provider.send('coinbaseCloud_getSingleBalance', [address, contract]);\n  }\n  /**\r\n   * Get balance for multiple account addresses across one or more tokens within a single blockchain and network.\r\n   *\r\n   * The balance incorporates transactions, internal transfers and all supported token transfers.\r\n   * Supports ERC-20 and ERC-721. This API is meant to be our primary API to get balances.\r\n   * A more simple and lower latency API that just fetches balance for a single address and token is getSingleBalance.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getbalances}\r\n   *\r\n   * @param addressesAndContracts - List of account or contract addresses and token identifiers.\r\n   * \tFor Ethereum the token identifier is the token contract address.\r\n   * @public\r\n   */\n\n\n  getBalances(addressesAndContracts) {\n    return this.provider.send('coinbaseCloud_getBalances', [addressesAndContracts]);\n  }\n  /**\r\n   * Get allowances for a specified owner and spender across one or more tokens.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenallowances}\r\n   *\r\n   * @param allowances - List of owner addresses, spender addresses, and token identifiers.\r\n   * \tFor Ethereum, the token identifier is the token contract address.\r\n   * @public\r\n   */\n\n\n  getTokenAllowances(allowances) {\n    return this.provider.send('coinbaseCloud_getTokenAllowances', [allowances]);\n  }\n  /**\r\n   * Get detailed information about a transaction, including all internal transactions and\r\n   * token transfers that were triggered by the transaction.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionbyhash}\r\n   *\r\n   * @param transactionHash - Transaction hash.\r\n   * @public\r\n   */\n\n\n  getTransactionByHash(transactionHash) {\n    return this.provider.send('coinbaseCloud_getTransactionByHash', [transactionHash]);\n  }\n  /**\r\n   * Get external transactions, internal transactions (triggered by smart contracts) and\r\n   * token transfers for a given address. Includes activity from and to the input address.\r\n   * Transactions are returned in reverse chronological order.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionsbyaddress}\r\n   *\r\n   * @param address - Account address.\r\n   * @param blockStart - Start of block range to scan for transactions.\r\n   * @param blockEnd - End of block range to scan for transactions. Defaults to latest.\r\n   * @param addressFilter - Filter transactions by SENDER_ONLY, RECEIVER_ONLY, or\r\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\r\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\r\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\r\n   * @param pageSize - The number of transactions displayed per page. The default and max value are 1000.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @public\r\n   */\n\n\n  getTransactionsByAddress(address, blockStart) {\n    let blockEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BLOCK_END;\n    let addressFilter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_ADDRESS_FILTER;\n    let sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_SORTING_PREFERENCE;\n    let pageSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DEFAULT_PAGE_SIZE;\n    let pageNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : DEFAULT_PAGE_NUMBER;\n    return this.provider.send('coinbaseCloud_getTransactionsByAddress', [address, blockStart, blockEnd, addressFilter, sort, pageSize, pageNumber]);\n  }\n  /**\r\n   * Get token transfers for a given address (in reverse chronological order).\r\n   * Includes activity from and to the input address.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokentransfersbyaddress}\r\n   *\r\n   * @param address - Account address.\r\n   * @param blockStart - Inclusive of specified block.\r\n   * @param blockEnd - Inclusive of specified block. Defaults to latest.\r\n   * @param addressFilter - Filter transfers by SENDER_ONLY, RECEIVER_ONLY, or\r\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\r\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\r\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\r\n   * @param pageSize - The number of transfers displayed per page. The default and max value are 1000.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @public\r\n   */\n\n\n  getTokenTransfersByAddress(address, blockStart) {\n    let blockEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BLOCK_END;\n    let addressFilter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_ADDRESS_FILTER;\n    let sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_SORTING_PREFERENCE;\n    let pageSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DEFAULT_PAGE_SIZE;\n    let pageNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : DEFAULT_PAGE_NUMBER;\n    return this.provider.send('coinbaseCloud_getTokenTransfersByAddress', [address, blockStart, blockEnd, addressFilter, sort, pageSize, pageNumber]);\n  }\n  /**\r\n   * Get events triggered by the given token contract.\r\n   * The event data is returned in an easy-to-read format.\r\n   * Only supports events defined by Ethereum standards for ERC-20 and ERC-721 tokens.\r\n   *\r\n   * Different event types will return different event data.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenstandardevents}\r\n   *\r\n   * @param contract - Account address.\r\n   * @param blockStart - Start of block range to scan for events.\r\n   * @param blockEnd - End of block range to scan for events. Defaults to latest.\r\n   * @param eventSignatureHashes - List of event signature hashes. Defaults to all\r\n   * \tstandard events for ERC-20/ERC-721 (Transfer, Approval, ApprovalForAll)\r\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\r\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\r\n   * @param pageSize - The number of events displayed per page. The default and max value are 1000.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\r\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\r\n   * @public\r\n   */\n\n\n  getTokenStandardEvents(contract, blockStart) {\n    let blockEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BLOCK_END;\n    let eventSignatureHashes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_EVENT_SIGNATURE_HASHES;\n    let sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_SORTING_PREFERENCE;\n    let pageSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DEFAULT_PAGE_SIZE;\n    let pageNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : DEFAULT_PAGE_NUMBER;\n    return this.provider.send('coinbaseCloud_getTokenStandardEvents', [contract, blockStart, blockEnd, eventSignatureHashes, sort, pageSize, pageNumber]);\n  }\n  /**\r\n   * Get metadata for the given token contract address.\r\n   *\r\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenmetadata}\r\n   *\r\n   * @param contract - The token contract.\r\n   * @public\r\n   */\n\n\n  getTokenMetadata(contract) {\n    return this.provider.send('coinbaseCloud_getTokenMetadata', [contract]);\n  }\n\n}\n\nconst DEFAULT_NETWORK = Network.ETH_MAINNET;\n/**\r\n * Mapping of network names to their corresponding Network strings used to\r\n * create an ethers.js Provider instance.\r\n */\n\nconst EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_GOERLI]: 'goerli'\n};\n/**\r\n * CoinbaseCloudConfig defines the configuration needed to create an instance of\r\n * the CoinbaseCloud SDK.\r\n *\r\n * @public\r\n */\n\nclass CoinbaseCloudConfig {\n  constructor(config) {\n    this.apiUsername = config.apiUsername;\n    this.apiPassword = config.apiPassword;\n    this.network = config.network || DEFAULT_NETWORK;\n  }\n\n}\n\nconst VERSION = '0.0.1';\n/**\r\n * CoinbaseCloudProvider is an extension of ether's.js JsonRpcProvider.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link CoinbaseCloud} and get the provider via {@link CoinbaseCloud.provider}.\r\n *\r\n * @public\r\n */\n\nclass CoinbaseCloudProvider extends JsonRpcProvider {\n  /** @internal */\n  constructor(config) {\n    const connection = getCoinbaseCloudConnectionInfo(config.network, config.apiUsername, config.apiPassword); // Convert the CoinbaseCloud Network to a network understandable by ethers.js.\n\n    const ethersNetwork = EthersNetwork[config.network];\n    super(connection, ethersNetwork);\n  }\n\n}\n/**\r\n * Returns a {@link ConnectionInfo} object compatible with ethers.js that has\r\n * the correct URL and headers configured for CoinbaseCloud.\r\n *\r\n * @internal\r\n */\n\n\nfunction getCoinbaseCloudConnectionInfo(network, user, password) {\n  const url = getCoinbaseCloudHttpUrl(network);\n  return {\n    headers: {\n      'CoinbaseCloud-Ethers-Sdk-Version': VERSION\n    },\n    url,\n    user,\n    password\n  };\n}\n/**\r\n * Returns the base URL for making CoinbaseCloud API requests.\r\n *\r\n * @internal\r\n */\n\n\nfunction getCoinbaseCloudHttpUrl(network) {\n  const networkComponent = encodeURIComponent(EthersNetwork[network]);\n  return `https://${networkComponent}.ethereum.coinbasecloud.net/`;\n}\n/**\r\n * The CoinbaseCloud ethers.js SDK client.\r\n *\r\n * Each SDK instance is associated with a network, an API username and the corresponding API password.\r\n *\r\n * @public\r\n */\n\n\nclass CoinbaseCloud {\n  /**\r\n   * @param {CoinbaseCloudSettings} [settings] - The CoinbaseCloud configuration\r\n   * @public\r\n   */\n  constructor(settings) {\n    this.config = new CoinbaseCloudConfig(settings);\n    this.provider = new CoinbaseCloudProvider(this.config);\n    this.advanced = new AdvancedApis(this.provider);\n  }\n\n}\n\nexport { CoinbaseCloud, Network };","map":{"version":3,"mappings":"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","names":["Network","DEFAULT_ADDRESS_FILTER","DEFAULT_BLOCK_END","DEFAULT_SORTING_PREFERENCE","DEFAULT_PAGE_SIZE","DEFAULT_PAGE_NUMBER","DEFAULT_EVENT_SIGNATURE_HASHES","AdvancedApis","constructor","provider","getSingleBalance","address","contract","send","getBalances","addressesAndContracts","getTokenAllowances","allowances","getTransactionByHash","transactionHash","getTransactionsByAddress","blockStart","blockEnd","addressFilter","sort","pageSize","pageNumber","getTokenTransfersByAddress","getTokenStandardEvents","eventSignatureHashes","getTokenMetadata","DEFAULT_NETWORK","ETH_MAINNET","EthersNetwork","ETH_GOERLI","CoinbaseCloudConfig","config","apiUsername","apiPassword","network","VERSION","CoinbaseCloudProvider","JsonRpcProvider","connection","getCoinbaseCloudConnectionInfo","ethersNetwork","user","password","url","getCoinbaseCloudHttpUrl","headers","networkComponent","encodeURIComponent","CoinbaseCloud","settings","advanced"],"sources":["/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/types/types.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/api/advanced/const.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/api/advanced/advanced.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/const.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/api/coinbase-cloud-config.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/version.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/api/coinbase-cloud-provider.ts","/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/node_modules/@coinbase/coinbase-cloud-sdk/src/api/coinbase-cloud.ts"],"sourcesContent":["/**\n * Options object used to configure the CoinbaseCloud SDK.\n *\n * @public\n */\nexport interface CoinbaseCloudSettings {\n  /** The CoinbaseCloud API username. This can be found in your Node project's settings. */\n  readonly apiUsername: string;\n\n  /** The CoinbaseCloud API password associated with the username. */\n  readonly apiPassword: string;\n\n  /** The name of the network for the SDK to interact with. */\n  readonly network?: Network;\n}\n\n/**\n * The supported networks by CoinbaseCloud. Note that some functions are not available\n * on all networks. Please refer to the CoinbaseCloud documentation for more details\n * {@link https://docs.cloud.coinbase.com/node/reference/welcome-to-node}\n *\n * @public\n */\nexport enum Network {\n  ETH_MAINNET = 'eth-mainnet',\n  ETH_GOERLI = 'eth-goerli',\n}\n","/**\n * Currently, the Advanced APIs either expect optional parameters to have the correct format\n * or not be present at all. This does not work well with how the JsonRpcProvider sends JSON-RPC\n * requests since it will send those as null. To work around that, we define the default values\n * for these optional parameters here in the client SDK.\n */\nexport const DEFAULT_ADDRESS_FILTER = 'SENDER_OR_RECEIVER';\n/**\n * 1 Trillion. This should be the same as the default value of 'latest' block.\n */\nexport const DEFAULT_BLOCK_END = '0x174876e800';\nexport const DEFAULT_SORTING_PREFERENCE = 'desc';\nexport const DEFAULT_PAGE_SIZE = 1000;\nexport const DEFAULT_PAGE_NUMBER = 1;\nexport const DEFAULT_EVENT_SIGNATURE_HASHES: string[] = [];\n","import { Allowance, GetTokenAllowancesResponse } from './allowances';\nimport { AddressAndContract, GetBalancesResponse, GetSingleBalanceResponse } from './balances';\nimport {\n  DEFAULT_ADDRESS_FILTER,\n  DEFAULT_BLOCK_END,\n  DEFAULT_EVENT_SIGNATURE_HASHES,\n  DEFAULT_PAGE_NUMBER,\n  DEFAULT_PAGE_SIZE,\n  DEFAULT_SORTING_PREFERENCE,\n} from './const';\nimport { GetTokenContractMetadataResponse, GetTokenStandardEventsResponse } from './contracts';\nimport {\n  GetTokenTransfersByAddressResponse,\n  GetTransactionByHashResponse,\n  GetTransactionsByAddressResponse,\n} from './transfers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\n/**\n * The Advanced API simplifies access to blockchain data by offering data cuts which\n * are hard to get via the native Ethereum API, and offers aggregated and filtered\n * data in a single API call. The Advanced API provides access to token balances for\n * accounts, transactions and transfers for accounts, smart contract event logs, and more.\n *\n * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-overview}\n */\nexport class AdvancedApis {\n  /**\n   * The JsonRpcProvider used to interact with the network.\n   *\n   * @internal\n   */\n  readonly provider: JsonRpcProvider;\n\n  /** @internal */\n  constructor(provider: JsonRpcProvider) {\n    this.provider = provider;\n  }\n\n  /**\n   * Get an accurate balance for a single token and a single account address.\n   *\n   * The balance takes into account transactions, internal transfers, and any\n   * supported token transfers. The caller can expect low latency from this\n   * method compared to the getBalances method.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getsinglebalance}\n   *\n   * @param address - An account address or a contract address.\n   * @param contract - Token identifier. For Ethereum the token identifier is the token contract address.\n   * @public\n   */\n  getSingleBalance(address: string, contract: string): Promise<GetSingleBalanceResponse> {\n    return this.provider.send('coinbaseCloud_getSingleBalance', [address, contract]);\n  }\n\n  /**\n   * Get balance for multiple account addresses across one or more tokens within a single blockchain and network.\n   *\n   * The balance incorporates transactions, internal transfers and all supported token transfers.\n   * Supports ERC-20 and ERC-721. This API is meant to be our primary API to get balances.\n   * A more simple and lower latency API that just fetches balance for a single address and token is getSingleBalance.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getbalances}\n   *\n   * @param addressesAndContracts - List of account or contract addresses and token identifiers.\n   * \tFor Ethereum the token identifier is the token contract address.\n   * @public\n   */\n  getBalances(addressesAndContracts: AddressAndContract[]): Promise<GetBalancesResponse> {\n    return this.provider.send('coinbaseCloud_getBalances', [addressesAndContracts]);\n  }\n\n  /**\n   * Get allowances for a specified owner and spender across one or more tokens.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenallowances}\n   *\n   * @param allowances - List of owner addresses, spender addresses, and token identifiers.\n   * \tFor Ethereum, the token identifier is the token contract address.\n   * @public\n   */\n  getTokenAllowances(allowances: Allowance[]): Promise<GetTokenAllowancesResponse> {\n    return this.provider.send('coinbaseCloud_getTokenAllowances', [allowances]);\n  }\n\n  /**\n   * Get detailed information about a transaction, including all internal transactions and\n   * token transfers that were triggered by the transaction.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionbyhash}\n   *\n   * @param transactionHash - Transaction hash.\n   * @public\n   */\n  getTransactionByHash(transactionHash: string): Promise<GetTransactionByHashResponse> {\n    return this.provider.send('coinbaseCloud_getTransactionByHash', [transactionHash]);\n  }\n\n  /**\n   * Get external transactions, internal transactions (triggered by smart contracts) and\n   * token transfers for a given address. Includes activity from and to the input address.\n   * Transactions are returned in reverse chronological order.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionsbyaddress}\n   *\n   * @param address - Account address.\n   * @param blockStart - Start of block range to scan for transactions.\n   * @param blockEnd - End of block range to scan for transactions. Defaults to latest.\n   * @param addressFilter - Filter transactions by SENDER_ONLY, RECEIVER_ONLY, or\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of transactions displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTransactionsByAddress(\n    address: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    addressFilter = DEFAULT_ADDRESS_FILTER,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTransactionsByAddressResponse> {\n    return this.provider.send('coinbaseCloud_getTransactionsByAddress', [\n      address,\n      blockStart,\n      blockEnd,\n      addressFilter,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get token transfers for a given address (in reverse chronological order).\n   * Includes activity from and to the input address.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokentransfersbyaddress}\n   *\n   * @param address - Account address.\n   * @param blockStart - Inclusive of specified block.\n   * @param blockEnd - Inclusive of specified block. Defaults to latest.\n   * @param addressFilter - Filter transfers by SENDER_ONLY, RECEIVER_ONLY, or\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of transfers displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTokenTransfersByAddress(\n    address: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    addressFilter = DEFAULT_ADDRESS_FILTER,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTokenTransfersByAddressResponse> {\n    return this.provider.send('coinbaseCloud_getTokenTransfersByAddress', [\n      address,\n      blockStart,\n      blockEnd,\n      addressFilter,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get events triggered by the given token contract.\n   * The event data is returned in an easy-to-read format.\n   * Only supports events defined by Ethereum standards for ERC-20 and ERC-721 tokens.\n   *\n   * Different event types will return different event data.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenstandardevents}\n   *\n   * @param contract - Account address.\n   * @param blockStart - Start of block range to scan for events.\n   * @param blockEnd - End of block range to scan for events. Defaults to latest.\n   * @param eventSignatureHashes - List of event signature hashes. Defaults to all\n   * \tstandard events for ERC-20/ERC-721 (Transfer, Approval, ApprovalForAll)\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of events displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTokenStandardEvents(\n    contract: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    eventSignatureHashes = DEFAULT_EVENT_SIGNATURE_HASHES,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTokenStandardEventsResponse> {\n    return this.provider.send('coinbaseCloud_getTokenStandardEvents', [\n      contract,\n      blockStart,\n      blockEnd,\n      eventSignatureHashes,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get metadata for the given token contract address.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenmetadata}\n   *\n   * @param contract - The token contract.\n   * @public\n   */\n  getTokenMetadata(contract: string): Promise<GetTokenContractMetadataResponse> {\n    return this.provider.send('coinbaseCloud_getTokenMetadata', [contract]);\n  }\n}\n","import { Network } from './types/types';\n\nexport const DEFAULT_NETWORK = Network.ETH_MAINNET;\n\n/**\n * Mapping of network names to their corresponding Network strings used to\n * create an ethers.js Provider instance.\n */\nexport const EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_GOERLI]: 'goerli',\n};\n","import { DEFAULT_NETWORK } from '../const';\nimport { CoinbaseCloudSettings, Network } from '../types/types';\n\n/**\n * CoinbaseCloudConfig defines the configuration needed to create an instance of\n * the CoinbaseCloud SDK.\n *\n * @public\n */\nexport class CoinbaseCloudConfig {\n  /** The CoinbaseCloud API username. This can be found in your Node project's settings. */\n  readonly apiUsername: string;\n\n  /** The CoinbaseCloud API password associated with the username. */\n  readonly apiPassword: string;\n\n  /** The Network that you want the SDK to interact with. */\n  readonly network: Network;\n\n  constructor(config: CoinbaseCloudSettings) {\n    this.apiUsername = config.apiUsername;\n    this.apiPassword = config.apiPassword;\n    this.network = config.network || DEFAULT_NETWORK;\n  }\n}\n","export const VERSION = '0.0.1';\n","import { EthersNetwork } from '../const';\nimport { Network } from '../types/types';\nimport { VERSION } from '../version';\nimport { CoinbaseCloudConfig } from './coinbase-cloud-config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { ConnectionInfo } from '@ethersproject/web';\n\n/**\n * CoinbaseCloudProvider is an extension of ether's.js JsonRpcProvider.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link CoinbaseCloud} and get the provider via {@link CoinbaseCloud.provider}.\n *\n * @public\n */\nexport class CoinbaseCloudProvider extends JsonRpcProvider {\n  /** @internal */\n  constructor(config: CoinbaseCloudConfig) {\n    const connection = getCoinbaseCloudConnectionInfo(config.network, config.apiUsername, config.apiPassword);\n\n    // Convert the CoinbaseCloud Network to a network understandable by ethers.js.\n    const ethersNetwork = EthersNetwork[config.network];\n    super(connection, ethersNetwork);\n  }\n}\n\n/**\n * Returns a {@link ConnectionInfo} object compatible with ethers.js that has\n * the correct URL and headers configured for CoinbaseCloud.\n *\n * @internal\n */\nfunction getCoinbaseCloudConnectionInfo(network: Network, user: string, password: string): ConnectionInfo {\n  const url = getCoinbaseCloudHttpUrl(network);\n  return {\n    headers: {\n      'CoinbaseCloud-Ethers-Sdk-Version': VERSION,\n    },\n    url,\n    user,\n    password,\n  };\n}\n\n/**\n * Returns the base URL for making CoinbaseCloud API requests.\n *\n * @internal\n */\nfunction getCoinbaseCloudHttpUrl(network: Network): string {\n  const networkComponent = encodeURIComponent(EthersNetwork[network]);\n  return `https://${networkComponent}.ethereum.coinbasecloud.net/`;\n}\n","import { CoinbaseCloudSettings } from '../types/types';\nimport { AdvancedApis } from './advanced/advanced';\nimport { CoinbaseCloudConfig } from './coinbase-cloud-config';\nimport { CoinbaseCloudProvider } from './coinbase-cloud-provider';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\n/**\n * The CoinbaseCloud ethers.js SDK client.\n *\n * Each SDK instance is associated with a network, an API username and the corresponding API password.\n *\n * @public\n */\nexport class CoinbaseCloud {\n  /**\n   * The JsonRpcProvider used to interact with the network.\n   * This can be extracted and used as any other ethers.js JsonRpcProvider.\n   */\n  readonly provider: JsonRpcProvider;\n\n  /** The configuration settings used by this SDK instance. */\n  readonly config: CoinbaseCloudConfig;\n\n  /** Advanced can be used to query Coinbase Cloud's Advanced Data APIs */\n  readonly advanced: AdvancedApis;\n\n  /**\n   * @param {CoinbaseCloudSettings} [settings] - The CoinbaseCloud configuration\n   * @public\n   */\n  constructor(settings: CoinbaseCloudSettings) {\n    this.config = new CoinbaseCloudConfig(settings);\n    this.provider = new CoinbaseCloudProvider(this.config);\n    this.advanced = new AdvancedApis(this.provider);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}