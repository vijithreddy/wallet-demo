{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgChannelOpenTry = void 0;\n\nvar json_1 = require(\"../../../../util/json\");\n\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\n\nvar Channel_1 = require(\"./Channel\");\n\nvar Height_1 = require(\"../client/Height\");\n\nvar tx_1 = require(\"@terra-money/terra.proto/ibc/core/channel/v1/tx\");\n/**\n * MsgChannelOpenTry defines a msg sent by a Relayer to try to open a channel on Chain B\n */\n\n\nvar MsgChannelOpenTry =\n/** @class */\nfunction (_super) {\n  __extends(MsgChannelOpenTry, _super);\n  /**\n   * @param port_id identifier of the port to use\n   * @param previous_channel_id\n   * @param channel channel info\n   * @param counterparty_version\n   * @param proof_init\n   * @param proof_height\n   * @param signer signer address\n   */\n\n\n  function MsgChannelOpenTry(port_id, previous_channel_id, channel, counterparty_version, proof_init, proof_height, signer) {\n    var _this = _super.call(this) || this;\n\n    _this.port_id = port_id;\n    _this.previous_channel_id = previous_channel_id;\n    _this.channel = channel;\n    _this.counterparty_version = counterparty_version;\n    _this.proof_init = proof_init;\n    _this.proof_height = proof_height;\n    _this.signer = signer;\n    return _this;\n  }\n\n  MsgChannelOpenTry.fromAmino = function (_) {\n    _;\n    throw new Error('Amino not supported');\n  };\n\n  MsgChannelOpenTry.prototype.toAmino = function () {\n    throw new Error('Amino not supported');\n  };\n\n  MsgChannelOpenTry.fromData = function (data) {\n    var port_id = data.port_id,\n        previous_channel_id = data.previous_channel_id,\n        channel = data.channel,\n        counterparty_version = data.counterparty_version,\n        proof_init = data.proof_init,\n        proof_height = data.proof_height,\n        signer = data.signer;\n    return new MsgChannelOpenTry(port_id, previous_channel_id, channel ? Channel_1.Channel.fromData(channel) : undefined, counterparty_version, proof_init, proof_height ? Height_1.Height.fromData(proof_height) : undefined, signer);\n  };\n\n  MsgChannelOpenTry.prototype.toData = function () {\n    var _a = this,\n        port_id = _a.port_id,\n        previous_channel_id = _a.previous_channel_id,\n        channel = _a.channel,\n        counterparty_version = _a.counterparty_version,\n        proof_init = _a.proof_init,\n        proof_height = _a.proof_height,\n        signer = _a.signer;\n\n    return {\n      '@type': '/ibc.core.channel.v1.MsgChannelOpenTry',\n      port_id: port_id,\n      previous_channel_id: previous_channel_id,\n      channel: channel ? channel.toData() : undefined,\n      counterparty_version: counterparty_version,\n      proof_init: proof_init,\n      proof_height: proof_height ? proof_height.toData() : undefined,\n      signer: signer\n    };\n  };\n\n  MsgChannelOpenTry.fromProto = function (proto) {\n    return new MsgChannelOpenTry(proto.portId, proto.previousChannelId, proto.channel ? Channel_1.Channel.fromProto(proto.channel) : undefined, proto.counterpartyVersion, Buffer.from(proto.proofInit).toString('base64'), proto.proofHeight ? Height_1.Height.fromProto(proto.proofHeight) : undefined, proto.signer);\n  };\n\n  MsgChannelOpenTry.prototype.toProto = function () {\n    var _a = this,\n        port_id = _a.port_id,\n        previous_channel_id = _a.previous_channel_id,\n        channel = _a.channel,\n        counterparty_version = _a.counterparty_version,\n        proof_init = _a.proof_init,\n        proof_height = _a.proof_height,\n        signer = _a.signer;\n\n    return tx_1.MsgChannelOpenTry.fromPartial({\n      portId: port_id,\n      previousChannelId: previous_channel_id,\n      channel: channel ? channel.toProto() : undefined,\n      counterpartyVersion: counterparty_version,\n      proofInit: Buffer.from(proof_init, 'base64'),\n      proofHeight: proof_height ? proof_height.toProto() : undefined,\n      signer: signer\n    });\n  };\n\n  MsgChannelOpenTry.prototype.packAny = function () {\n    return any_1.Any.fromPartial({\n      typeUrl: '/ibc.core.channel.v1.MsgChannelOpenTry',\n      value: tx_1.MsgChannelOpenTry.encode(this.toProto()).finish()\n    });\n  };\n\n  MsgChannelOpenTry.unpackAny = function (msgAny) {\n    return MsgChannelOpenTry.fromProto(tx_1.MsgChannelOpenTry.decode(msgAny.value));\n  };\n\n  return MsgChannelOpenTry;\n}(json_1.JSONSerializable);\n\nexports.MsgChannelOpenTry = MsgChannelOpenTry;","map":{"version":3,"mappings":"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","names":["__extends","port_id","previous_channel_id","channel","counterparty_version","proof_init","proof_height","signer","_super","_this","MsgChannelOpenTry","_","Error","data","Channel_1","fromData","undefined","Height_1","toData","proto","portId","previousChannelId","fromProto","counterpartyVersion","Buffer","from","proofInit","toString","proofHeight","tx_1","fromPartial","toProto","any_1","typeUrl","value","encode","finish","msgAny","decode","json_1","exports"],"sources":["../../../../../src/core/ibc/msgs/channel/MsgChannelOpenTry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}