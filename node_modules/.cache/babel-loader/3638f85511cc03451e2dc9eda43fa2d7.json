{"ast":null,"code":"var _jsxFileName = \"/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CoinbaseCloud, Network } from '@coinbase/coinbase-cloud-sdk';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState('');\n  const [walletScan, setWalletScan] = useState({\n    network: \"\",\n    balance: \"\",\n    latest_block: \"\"\n  });\n  const [table_data, setTableData] = useState([]);\n  ;\n  const [transaction_data, setTransactionData] = useState([]);\n  ;\n\n  function toFixedValue(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  function payLoad_erc20Tokens(walletAddress, contract_list) {\n    let tmp;\n    var address_contract_list = [];\n\n    for (var i = 0; i < contract_list.length; i++) {\n      tmp = {\n        \"address\": walletAddress,\n        \"contract\": contract_list[i]\n      };\n      address_contract_list.push(tmp);\n    }\n\n    return address_contract_list;\n  }\n\n  function populateTransactionData(transaction_list) {\n    let tmp;\n    var transaction_data = [];\n\n    for (var i = 0; i < transaction_list.length; i++) {\n      let block_timestamp = parseInt(transaction_list[i].blockTimestamp);\n      let time_diff = new Date().getTime() - block_timestamp * 1000;\n      let time_diff_days = Math.floor(time_diff / (1000 * 60 * 60 * 24));\n      let time_diff_hours = Math.floor(time_diff % (1000 * 3600 * 24) / (1000 * 3600));\n      let age;\n      const days_in_string = time_diff_days.toString();\n      const hours_in_string = time_diff_hours.toString();\n\n      if (time_diff_days > 0) {\n        age = days_in_string + \" days\" + \" \" + hours_in_string.toString() + \" hours ago\";\n      } else {\n        age = hours_in_string + \" hours ago\";\n      }\n\n      tmp = {\n        \"from\": transaction_list[i].from,\n        \"to\": transaction_list[i].to,\n        \"value\": ethers.utils.formatEther(transaction_list[i].value),\n        \"hash\": transaction_list[i].transactionHash,\n        \"block_number\": parseInt(transaction_list[i].blockNumber),\n        \"age\": age\n      };\n      transaction_data.push(tmp);\n    }\n\n    return transaction_data;\n  }\n\n  async function scanWallet() {\n    setTableData([]);\n    setTransactionData([]);\n    const settings = {\n      apiUsername: process.env.REACT_APP_NODE_USERNAME,\n      // You can find this in your Node project's settings\n      apiPassword: process.env.REACT_APP_NODE_PASSWORD,\n      // Password associated with the username\n      network: Network.ETH_MAINNET\n    };\n\n    if (ethers.utils.isAddress(walletAddress)) {\n      const coinbaseCloud = new CoinbaseCloud(settings);\n      const cbProvider = coinbaseCloud.provider;\n      const network_obj = await cbProvider.getNetwork();\n      const latest_block = await cbProvider.getBlockNumber();\n      const contract_list = [\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0x4d224452801ACEd8B2F0aebE155379bb5D594381\", \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"];\n      const contract_params = payLoad_erc20Tokens(walletAddress, contract_list); //call advanced API for erc20 tokens \n\n      const cb_balances = await coinbaseCloud.advanced.getBalances(contract_params);\n      let token_balances = cb_balances.balances[0].tokenBalances;\n      console.log(\"latest is: \", latest_block, \"Block -100\", latest_block - 50000);\n      const network = network_obj.name;\n      const preformat_balance = ethers.utils.formatEther(await cbProvider.getBalance(walletAddress));\n      const balance = toFixedValue(preformat_balance, 4);\n      setWalletScan({\n        network,\n        balance,\n        latest_block\n      });\n      let wrappedEthBalance;\n      let apeCoinBalance;\n      let usdcBalance;\n\n      for (const eachTokenBalance in token_balances) {\n        if (token_balances[eachTokenBalance].contract === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n          const preWrappedCoin = token_balances[eachTokenBalance].amount.toString();\n          wrappedEthBalance = ethers.utils.formatUnits(preWrappedCoin, token_balances[eachTokenBalance].decimals);\n          wrappedEthBalance = toFixedValue(wrappedEthBalance, 4);\n        } else if (token_balances[eachTokenBalance].contract === \"0x4d224452801aced8b2f0aebe155379bb5d594381\") {\n          const preApeCoin = token_balances[eachTokenBalance].amount.toString();\n          apeCoinBalance = ethers.utils.formatUnits(preApeCoin, token_balances[eachTokenBalance].decimals);\n          apeCoinBalance = toFixedValue(apeCoinBalance, 4);\n        } else if (token_balances[eachTokenBalance].contract === \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\") {\n          const preusdcBalance = token_balances[eachTokenBalance].amount.toString();\n          usdcBalance = ethers.utils.formatUnits(preusdcBalance, token_balances[eachTokenBalance].decimals);\n          usdcBalance = toFixedValue(usdcBalance, 4);\n        }\n      }\n\n      console.log(\"apecoin\", apeCoinBalance);\n      console.log(\"usdc\", usdcBalance);\n      console.log(\"wrapped\", wrappedEthBalance);\n      const table_data = [{\n        token_name: \"Ethereum\",\n        balance: balance\n      }, {\n        token_name: \"APECoin\",\n        balance: apeCoinBalance\n      }, {\n        token_name: \"Wrapped Ether\",\n        balance: wrappedEthBalance\n      }, {\n        token_name: \"USDC\",\n        balance: usdcBalance\n      }];\n      setTableData(table_data); //transactions\n\n      const transactions = await coinbaseCloud.advanced.getTransactionsByAddress(walletAddress, '0x0', //start block\n      ethers.utils.hexlify(latest_block), //end block\n      'SENDER_OR_RECEIVER', 'desc', 10, 1);\n      console.log(\"Verify my transactions\", transactions.transactions);\n      let transaction_list = transactions.transactions;\n      const transaction_data = populateTransactionData(transaction_list);\n      setTransactionData(transaction_data);\n      console.log(\"Verify my transaction data\", transaction_data);\n    } else {\n      alert(\"Please enter the correct eth address\");\n    }\n  }\n\n  const setWalletAddr = event => {\n    setWalletAddress(event.target.value);\n  };\n  /*\n  const setContractAddress = event => {\n      setContractAddr(event.target.value);\n    };\n  */\n\n\n  const handleSubmit = event => {\n    event.preventDefault(); // üëáÔ∏è value of input field\n\n    scanWallet();\n    console.log(\"table data is\", typeof table_data);\n    console.log('WalletAddress ', walletAddress);\n  };\n  /*\n    function handleContractSubmit(event) {\n      event.preventDefault();\n      // üëáÔ∏è value of input field\n      console.log('ContractAddress ', contractAddress);\n    }\n  \n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Wallet Address Entered: \", walletAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Network Name: \", walletScan.network]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Latest Block: \", walletScan.latest_block]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-style-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wallet Scanner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"walletAddress\",\n            type: \"text\",\n            name: \"walletAddress\",\n            value: walletAddress,\n            onChange: setWalletAddr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Balances: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"styled-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Token Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: table_data.map((value, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.token_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.balance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 25\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Transactions: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"styled-table1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Age\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Block Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"From\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transaction Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transaction_data.map((value, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.age\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.block_number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.from\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.to\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.hash\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 23\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RZ+2GQMvpUYkg0cFXehEmpJjvYA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","CoinbaseCloud","Network","App","walletAddress","setWalletAddress","walletScan","setWalletScan","network","balance","latest_block","table_data","setTableData","transaction_data","setTransactionData","toFixedValue","value","dp","parseFloat","toFixed","payLoad_erc20Tokens","contract_list","tmp","address_contract_list","i","length","push","populateTransactionData","transaction_list","block_timestamp","parseInt","blockTimestamp","time_diff","Date","getTime","time_diff_days","Math","floor","time_diff_hours","age","days_in_string","toString","hours_in_string","from","to","utils","formatEther","transactionHash","blockNumber","scanWallet","settings","apiUsername","process","env","REACT_APP_NODE_USERNAME","apiPassword","REACT_APP_NODE_PASSWORD","ETH_MAINNET","isAddress","coinbaseCloud","cbProvider","provider","network_obj","getNetwork","getBlockNumber","contract_params","cb_balances","advanced","getBalances","token_balances","balances","tokenBalances","console","log","name","preformat_balance","getBalance","wrappedEthBalance","apeCoinBalance","usdcBalance","eachTokenBalance","contract","preWrappedCoin","amount","formatUnits","decimals","preApeCoin","preusdcBalance","token_name","transactions","getTransactionsByAddress","hexlify","alert","setWalletAddr","event","target","handleSubmit","preventDefault","map","key","block_number","hash"],"sources":["/Users/vijithreddybheemireddi/Documents/wallet/wallet-demo/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CoinbaseCloud, Network } from '@coinbase/coinbase-cloud-sdk';\nimport './App.css';\n\n\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState('');\n  const [walletScan, setWalletScan] = useState({\n    network: \"\",\n    balance: \"\",\n    latest_block: \"\"\n  });\n  const [table_data, setTableData] = useState([]);;\n  const [transaction_data, setTransactionData] = useState([]);;\n\n  function toFixedValue(value, dp) {\n    return +parseFloat(value).toFixed(dp);\n  }\n\n  function payLoad_erc20Tokens(walletAddress, contract_list) {\n    let tmp;\n    var address_contract_list = []\n    for (var i = 0; i < contract_list.length; i++) {\n      tmp = { \"address\": walletAddress, \"contract\": contract_list[i] }\n      address_contract_list.push(tmp)\n    }\n    return address_contract_list\n  }\n \n  function populateTransactionData(transaction_list){\n    let tmp;\n    var transaction_data = []\n    for (var i = 0; i < transaction_list.length; i++) {\n      let block_timestamp=parseInt(transaction_list[i].blockTimestamp);\n      let time_diff=new Date().getTime()-block_timestamp*1000;\n      let time_diff_days=Math.floor(time_diff/(1000*60*60*24));\n      let time_diff_hours=Math.floor((time_diff%(1000*3600*24))/(1000*3600));\n      let age;\n      const days_in_string=time_diff_days.toString()\n      const hours_in_string=time_diff_hours.toString()\n      if (time_diff_days>0){\n        age=days_in_string+\" days\" + \" \"+hours_in_string.toString()+\" hours ago\"\n      }\n      else{\n        age=hours_in_string+\" hours ago\"\n      }\n\n      tmp = { \"from\": transaction_list[i].from, \"to\": transaction_list[i].to, \"value\": ethers.utils.formatEther(transaction_list[i].value), \"hash\": transaction_list[i].transactionHash, \"block_number\": parseInt(transaction_list[i].blockNumber), \"age\": age }\n      transaction_data.push(tmp)\n    }\n    return transaction_data\n  }\n\n  async function scanWallet() {\n\n    setTableData([]);\n    setTransactionData([]);\n    const settings = {\n      apiUsername: process.env.REACT_APP_NODE_USERNAME, // You can find this in your Node project's settings\n      apiPassword: process.env.REACT_APP_NODE_PASSWORD, // Password associated with the username\n      network: Network.ETH_MAINNET\n    }\n\n\n    if (ethers.utils.isAddress(walletAddress)) {\n      const coinbaseCloud = new CoinbaseCloud(settings)\n      const cbProvider = coinbaseCloud.provider\n\n      const network_obj = await cbProvider.getNetwork();\n      const latest_block = await cbProvider.getBlockNumber()\n\n\n     \n      \n\n\n      const contract_list = [\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0x4d224452801ACEd8B2F0aebE155379bb5D594381\", \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n      const contract_params = payLoad_erc20Tokens(walletAddress, contract_list);\n\n\n      //call advanced API for erc20 tokens \n      const cb_balances = await coinbaseCloud.advanced.getBalances(contract_params)\n      let token_balances = cb_balances.balances[0].tokenBalances\n\n\n      console.log(\"latest is: \", latest_block, \"Block -100\", latest_block - 50000)\n\n\n      const network = network_obj.name;\n      const preformat_balance = ethers.utils.formatEther(await cbProvider.getBalance(walletAddress));\n\n      const balance = toFixedValue(preformat_balance, 4)\n      setWalletScan({\n        network,\n        balance,\n        latest_block\n      });\n\n      let wrappedEthBalance;\n      let apeCoinBalance;\n      let usdcBalance;\n      for (const eachTokenBalance in token_balances) {\n        if (token_balances[eachTokenBalance].contract === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n          const preWrappedCoin = token_balances[eachTokenBalance].amount.toString();\n          wrappedEthBalance = ethers.utils.formatUnits(preWrappedCoin, token_balances[eachTokenBalance].decimals);\n          wrappedEthBalance = toFixedValue(wrappedEthBalance, 4);\n        }\n        else if (token_balances[eachTokenBalance].contract === \"0x4d224452801aced8b2f0aebe155379bb5d594381\") {\n          const preApeCoin = token_balances[eachTokenBalance].amount.toString();\n          apeCoinBalance = ethers.utils.formatUnits(preApeCoin, token_balances[eachTokenBalance].decimals);\n          apeCoinBalance = toFixedValue(apeCoinBalance, 4)\n        }\n        else if (token_balances[eachTokenBalance].contract === \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\") {\n          const preusdcBalance = token_balances[eachTokenBalance].amount.toString();\n          usdcBalance = ethers.utils.formatUnits(preusdcBalance, token_balances[eachTokenBalance].decimals);\n          usdcBalance = toFixedValue(usdcBalance, 4)\n        }\n      }\n\n      console.log(\"apecoin\", apeCoinBalance);\n      console.log(\"usdc\", usdcBalance);\n      console.log(\"wrapped\", wrappedEthBalance);\n\n\n\n      const table_data = [\n        { token_name: \"Ethereum\", balance: balance },\n        { token_name: \"APECoin\", balance: apeCoinBalance },\n        { token_name: \"Wrapped Ether\", balance: wrappedEthBalance },\n        { token_name: \"USDC\", balance: usdcBalance }\n      ]\n      setTableData(table_data);\n\n       //transactions\n       const transactions = await coinbaseCloud.advanced\n       .getTransactionsByAddress(\n         walletAddress,\n         '0x0',//start block\n         ethers.utils.hexlify(latest_block),//end block\n         'SENDER_OR_RECEIVER',\n         'desc',\n         10,\n         1\n       );\n\n     console.log(\"Verify my transactions\", transactions.transactions)\n     let transaction_list=transactions.transactions;\n     const transaction_data=populateTransactionData(transaction_list)\n     setTransactionData(transaction_data)\n\n     console.log(\"Verify my transaction data\", transaction_data)\n\n    } else {\n      alert(\"Please enter the correct eth address\");\n    }\n\n\n\n  }\n\n\n  const setWalletAddr = event => {\n    setWalletAddress(event.target.value);\n  };\n  /*\n  const setContractAddress = event => {\n      setContractAddr(event.target.value);\n    };\n  */\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // üëáÔ∏è value of input field\n    scanWallet();\n    console.log(\"table data is\", typeof (table_data));\n    console.log('WalletAddress ', walletAddress);\n\n  };\n  /*\n    function handleContractSubmit(event) {\n      event.preventDefault();\n      // üëáÔ∏è value of input field\n      console.log('ContractAddress ', contractAddress);\n    }\n  \n  */\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Wallet Address Entered: {walletAddress}</h3>\n        <h3>Network Name: {walletScan.network}</h3>\n        <h4>Latest Block: {walletScan.latest_block}</h4>\n        <div className=\"form-style-6\">\n          <h1>Wallet Scanner</h1>\n          <form onSubmit={handleSubmit}>\n            <input id=\"walletAddress\" type=\"text\" name=\"walletAddress\" value={walletAddress} onChange={setWalletAddr} />\n            <input type=\"submit\" value=\"Send\" />\n          </form>\n        </div>\n\n        \n          \n            <h3> Balances: </h3>\n            <table className=\"styled-table\">\n              <thead>\n                <tr>\n                  <th>Token Name</th>\n                  <th>Balance</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  table_data.map((value, key) => {\n                    return (\n                      <tr key={key}>\n                        <td>{value.token_name}</td>\n                        <td>{value.balance}</td>\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n    \n          \n            <h3> Transactions: </h3>\n            <table className=\"styled-table1\">\n\n              <thead>\n                <tr>\n                  <th>Age</th>\n                  <th>Block Number</th>\n                  <th>From</th>\n                  <th>To</th>\n                  <th>Transaction Hash</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                transaction_data.map((value, key) => {\n                  return (\n                    <tr key={key}>\n                      <td>{value.age}</td>\n                      <td>{value.block_number}</td>\n                      <td>{value.from}</td>\n                      <td>{value.to}</td>\n                      <td>{value.hash}</td>\n                      <td>{value.value}</td>\n                    </tr>\n                  )\n                }) \n              }\n              </tbody>\n            </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}