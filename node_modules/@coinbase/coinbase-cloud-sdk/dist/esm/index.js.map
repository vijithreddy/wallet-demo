{"version":3,"file":"index.js","sources":["../../src/types/types.ts","../../src/api/advanced/const.ts","../../src/api/advanced/advanced.ts","../../src/const.ts","../../src/api/coinbase-cloud-config.ts","../../src/version.ts","../../src/api/coinbase-cloud-provider.ts","../../src/api/coinbase-cloud.ts"],"sourcesContent":["/**\n * Options object used to configure the CoinbaseCloud SDK.\n *\n * @public\n */\nexport interface CoinbaseCloudSettings {\n  /** The CoinbaseCloud API username. This can be found in your Node project's settings. */\n  readonly apiUsername: string;\n\n  /** The CoinbaseCloud API password associated with the username. */\n  readonly apiPassword: string;\n\n  /** The name of the network for the SDK to interact with. */\n  readonly network?: Network;\n}\n\n/**\n * The supported networks by CoinbaseCloud. Note that some functions are not available\n * on all networks. Please refer to the CoinbaseCloud documentation for more details\n * {@link https://docs.cloud.coinbase.com/node/reference/welcome-to-node}\n *\n * @public\n */\nexport enum Network {\n  ETH_MAINNET = 'eth-mainnet',\n  ETH_GOERLI = 'eth-goerli',\n}\n","/**\n * Currently, the Advanced APIs either expect optional parameters to have the correct format\n * or not be present at all. This does not work well with how the JsonRpcProvider sends JSON-RPC\n * requests since it will send those as null. To work around that, we define the default values\n * for these optional parameters here in the client SDK.\n */\nexport const DEFAULT_ADDRESS_FILTER = 'SENDER_OR_RECEIVER';\n/**\n * 1 Trillion. This should be the same as the default value of 'latest' block.\n */\nexport const DEFAULT_BLOCK_END = '0x174876e800';\nexport const DEFAULT_SORTING_PREFERENCE = 'desc';\nexport const DEFAULT_PAGE_SIZE = 1000;\nexport const DEFAULT_PAGE_NUMBER = 1;\nexport const DEFAULT_EVENT_SIGNATURE_HASHES: string[] = [];\n","import { Allowance, GetTokenAllowancesResponse } from './allowances';\nimport { AddressAndContract, GetBalancesResponse, GetSingleBalanceResponse } from './balances';\nimport {\n  DEFAULT_ADDRESS_FILTER,\n  DEFAULT_BLOCK_END,\n  DEFAULT_EVENT_SIGNATURE_HASHES,\n  DEFAULT_PAGE_NUMBER,\n  DEFAULT_PAGE_SIZE,\n  DEFAULT_SORTING_PREFERENCE,\n} from './const';\nimport { GetTokenContractMetadataResponse, GetTokenStandardEventsResponse } from './contracts';\nimport {\n  GetTokenTransfersByAddressResponse,\n  GetTransactionByHashResponse,\n  GetTransactionsByAddressResponse,\n} from './transfers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\n/**\n * The Advanced API simplifies access to blockchain data by offering data cuts which\n * are hard to get via the native Ethereum API, and offers aggregated and filtered\n * data in a single API call. The Advanced API provides access to token balances for\n * accounts, transactions and transfers for accounts, smart contract event logs, and more.\n *\n * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-overview}\n */\nexport class AdvancedApis {\n  /**\n   * The JsonRpcProvider used to interact with the network.\n   *\n   * @internal\n   */\n  readonly provider: JsonRpcProvider;\n\n  /** @internal */\n  constructor(provider: JsonRpcProvider) {\n    this.provider = provider;\n  }\n\n  /**\n   * Get an accurate balance for a single token and a single account address.\n   *\n   * The balance takes into account transactions, internal transfers, and any\n   * supported token transfers. The caller can expect low latency from this\n   * method compared to the getBalances method.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getsinglebalance}\n   *\n   * @param address - An account address or a contract address.\n   * @param contract - Token identifier. For Ethereum the token identifier is the token contract address.\n   * @public\n   */\n  getSingleBalance(address: string, contract: string): Promise<GetSingleBalanceResponse> {\n    return this.provider.send('coinbaseCloud_getSingleBalance', [address, contract]);\n  }\n\n  /**\n   * Get balance for multiple account addresses across one or more tokens within a single blockchain and network.\n   *\n   * The balance incorporates transactions, internal transfers and all supported token transfers.\n   * Supports ERC-20 and ERC-721. This API is meant to be our primary API to get balances.\n   * A more simple and lower latency API that just fetches balance for a single address and token is getSingleBalance.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_getbalances}\n   *\n   * @param addressesAndContracts - List of account or contract addresses and token identifiers.\n   * \tFor Ethereum the token identifier is the token contract address.\n   * @public\n   */\n  getBalances(addressesAndContracts: AddressAndContract[]): Promise<GetBalancesResponse> {\n    return this.provider.send('coinbaseCloud_getBalances', [addressesAndContracts]);\n  }\n\n  /**\n   * Get allowances for a specified owner and spender across one or more tokens.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenallowances}\n   *\n   * @param allowances - List of owner addresses, spender addresses, and token identifiers.\n   * \tFor Ethereum, the token identifier is the token contract address.\n   * @public\n   */\n  getTokenAllowances(allowances: Allowance[]): Promise<GetTokenAllowancesResponse> {\n    return this.provider.send('coinbaseCloud_getTokenAllowances', [allowances]);\n  }\n\n  /**\n   * Get detailed information about a transaction, including all internal transactions and\n   * token transfers that were triggered by the transaction.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionbyhash}\n   *\n   * @param transactionHash - Transaction hash.\n   * @public\n   */\n  getTransactionByHash(transactionHash: string): Promise<GetTransactionByHashResponse> {\n    return this.provider.send('coinbaseCloud_getTransactionByHash', [transactionHash]);\n  }\n\n  /**\n   * Get external transactions, internal transactions (triggered by smart contracts) and\n   * token transfers for a given address. Includes activity from and to the input address.\n   * Transactions are returned in reverse chronological order.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettransactionsbyaddress}\n   *\n   * @param address - Account address.\n   * @param blockStart - Start of block range to scan for transactions.\n   * @param blockEnd - End of block range to scan for transactions. Defaults to latest.\n   * @param addressFilter - Filter transactions by SENDER_ONLY, RECEIVER_ONLY, or\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of transactions displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTransactionsByAddress(\n    address: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    addressFilter = DEFAULT_ADDRESS_FILTER,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTransactionsByAddressResponse> {\n    return this.provider.send('coinbaseCloud_getTransactionsByAddress', [\n      address,\n      blockStart,\n      blockEnd,\n      addressFilter,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get token transfers for a given address (in reverse chronological order).\n   * Includes activity from and to the input address.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokentransfersbyaddress}\n   *\n   * @param address - Account address.\n   * @param blockStart - Inclusive of specified block.\n   * @param blockEnd - Inclusive of specified block. Defaults to latest.\n   * @param addressFilter - Filter transfers by SENDER_ONLY, RECEIVER_ONLY, or\n   * \tSENDER_OR_RECEIVER. Defaults to SENDER_OR_RECEIVER.\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of transfers displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTokenTransfersByAddress(\n    address: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    addressFilter = DEFAULT_ADDRESS_FILTER,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTokenTransfersByAddressResponse> {\n    return this.provider.send('coinbaseCloud_getTokenTransfersByAddress', [\n      address,\n      blockStart,\n      blockEnd,\n      addressFilter,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get events triggered by the given token contract.\n   * The event data is returned in an easy-to-read format.\n   * Only supports events defined by Ethereum standards for ERC-20 and ERC-721 tokens.\n   *\n   * Different event types will return different event data.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenstandardevents}\n   *\n   * @param contract - Account address.\n   * @param blockStart - Start of block range to scan for events.\n   * @param blockEnd - End of block range to scan for events. Defaults to latest.\n   * @param eventSignatureHashes - List of event signature hashes. Defaults to all\n   * \tstandard events for ERC-20/ERC-721 (Transfer, Approval, ApprovalForAll)\n   * @param sort - The sorting preference, use asc to sort by ascending and desc to sort by descending.\n   *  The default is desc. Tip: Specify a smaller blockStart and blockEnd range for faster search results.\n   * @param pageSize - The number of events displayed per page. The default and max value are 1000.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @param pageNumber - The integer page number, if pagination is enabled. It starts with 1.\n   *  See [Handle pagination]{@link https://docs.cloud.coinbase.com/node/reference/advanced-api-quickstart#handle-pagination}.\n   * @public\n   */\n  getTokenStandardEvents(\n    contract: string,\n    blockStart: string,\n    blockEnd = DEFAULT_BLOCK_END,\n    eventSignatureHashes = DEFAULT_EVENT_SIGNATURE_HASHES,\n    sort = DEFAULT_SORTING_PREFERENCE,\n    pageSize = DEFAULT_PAGE_SIZE,\n    pageNumber = DEFAULT_PAGE_NUMBER,\n  ): Promise<GetTokenStandardEventsResponse> {\n    return this.provider.send('coinbaseCloud_getTokenStandardEvents', [\n      contract,\n      blockStart,\n      blockEnd,\n      eventSignatureHashes,\n      sort,\n      pageSize,\n      pageNumber,\n    ]);\n  }\n\n  /**\n   * Get metadata for the given token contract address.\n   *\n   * {@link https://docs.cloud.coinbase.com/node/reference/advanced-api-reference#coinbasecloud_gettokenmetadata}\n   *\n   * @param contract - The token contract.\n   * @public\n   */\n  getTokenMetadata(contract: string): Promise<GetTokenContractMetadataResponse> {\n    return this.provider.send('coinbaseCloud_getTokenMetadata', [contract]);\n  }\n}\n","import { Network } from './types/types';\n\nexport const DEFAULT_NETWORK = Network.ETH_MAINNET;\n\n/**\n * Mapping of network names to their corresponding Network strings used to\n * create an ethers.js Provider instance.\n */\nexport const EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_GOERLI]: 'goerli',\n};\n","import { DEFAULT_NETWORK } from '../const';\nimport { CoinbaseCloudSettings, Network } from '../types/types';\n\n/**\n * CoinbaseCloudConfig defines the configuration needed to create an instance of\n * the CoinbaseCloud SDK.\n *\n * @public\n */\nexport class CoinbaseCloudConfig {\n  /** The CoinbaseCloud API username. This can be found in your Node project's settings. */\n  readonly apiUsername: string;\n\n  /** The CoinbaseCloud API password associated with the username. */\n  readonly apiPassword: string;\n\n  /** The Network that you want the SDK to interact with. */\n  readonly network: Network;\n\n  constructor(config: CoinbaseCloudSettings) {\n    this.apiUsername = config.apiUsername;\n    this.apiPassword = config.apiPassword;\n    this.network = config.network || DEFAULT_NETWORK;\n  }\n}\n","export const VERSION = '0.0.1';\n","import { EthersNetwork } from '../const';\nimport { Network } from '../types/types';\nimport { VERSION } from '../version';\nimport { CoinbaseCloudConfig } from './coinbase-cloud-config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { ConnectionInfo } from '@ethersproject/web';\n\n/**\n * CoinbaseCloudProvider is an extension of ether's.js JsonRpcProvider.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link CoinbaseCloud} and get the provider via {@link CoinbaseCloud.provider}.\n *\n * @public\n */\nexport class CoinbaseCloudProvider extends JsonRpcProvider {\n  /** @internal */\n  constructor(config: CoinbaseCloudConfig) {\n    const connection = getCoinbaseCloudConnectionInfo(config.network, config.apiUsername, config.apiPassword);\n\n    // Convert the CoinbaseCloud Network to a network understandable by ethers.js.\n    const ethersNetwork = EthersNetwork[config.network];\n    super(connection, ethersNetwork);\n  }\n}\n\n/**\n * Returns a {@link ConnectionInfo} object compatible with ethers.js that has\n * the correct URL and headers configured for CoinbaseCloud.\n *\n * @internal\n */\nfunction getCoinbaseCloudConnectionInfo(network: Network, user: string, password: string): ConnectionInfo {\n  const url = getCoinbaseCloudHttpUrl(network);\n  return {\n    headers: {\n      'CoinbaseCloud-Ethers-Sdk-Version': VERSION,\n    },\n    url,\n    user,\n    password,\n  };\n}\n\n/**\n * Returns the base URL for making CoinbaseCloud API requests.\n *\n * @internal\n */\nfunction getCoinbaseCloudHttpUrl(network: Network): string {\n  const networkComponent = encodeURIComponent(EthersNetwork[network]);\n  return `https://${networkComponent}.ethereum.coinbasecloud.net/`;\n}\n","import { CoinbaseCloudSettings } from '../types/types';\nimport { AdvancedApis } from './advanced/advanced';\nimport { CoinbaseCloudConfig } from './coinbase-cloud-config';\nimport { CoinbaseCloudProvider } from './coinbase-cloud-provider';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\n/**\n * The CoinbaseCloud ethers.js SDK client.\n *\n * Each SDK instance is associated with a network, an API username and the corresponding API password.\n *\n * @public\n */\nexport class CoinbaseCloud {\n  /**\n   * The JsonRpcProvider used to interact with the network.\n   * This can be extracted and used as any other ethers.js JsonRpcProvider.\n   */\n  readonly provider: JsonRpcProvider;\n\n  /** The configuration settings used by this SDK instance. */\n  readonly config: CoinbaseCloudConfig;\n\n  /** Advanced can be used to query Coinbase Cloud's Advanced Data APIs */\n  readonly advanced: AdvancedApis;\n\n  /**\n   * @param {CoinbaseCloudSettings} [settings] - The CoinbaseCloud configuration\n   * @public\n   */\n  constructor(settings: CoinbaseCloudSettings) {\n    this.config = new CoinbaseCloudConfig(settings);\n    this.provider = new CoinbaseCloudProvider(this.config);\n    this.advanced = new AdvancedApis(this.provider);\n  }\n}\n"],"names":[],"mappings":"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"}